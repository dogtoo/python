<!DOCTYPE html>

<html lang="zh-Hant-TW">
<head>
    <meta http-equiv="content-type" content="text/html;charset=UTF8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title></title>
    <script src="../script/js/util.js" type="text/javascript" charset="UTF8"></script>
    <script src="../script/js/control.js" type="text/javascript" charset="UTF8"></script>
    <script src="../script/js/absPainter.js" type="text/javascript" charset="UTF8"></script>
    <script src="../script/js/axis.js" type="text/javascript" charset="UTF8"></script>
    <script src="../script/js/axis-x.js" type="text/javascript" charset="UTF8"></script>
    <script src="../script/js/axis-y.js" type="text/javascript" charset="UTF8"></script>
    <script src="../script/js/cross.js" type="text/javascript" charset="UTF8"></script>
    <script src="../script/js/label.js" type="text/javascript" charset="UTF8"></script>
    <script src="../script/js/line.js" type="text/javascript" charset="UTF8"></script>
</head>
<body>
    <canvas id="crossline" width="500" height="200" style="z-index: 2; border: 1px solid #69c"></canvas>
</body>
<script type="text/javascript">

    var painterCrossKline = function(canvasId, paintStream, data) {
        Painter.call(this, canvasId, paintStream);
    };
    painterCrossKline.prototype = Object.create(Painter.prototype);
    painterCrossKline.prototype.constructor = painterCrossKline;
    
    var paintStream = [
        {
            'price':{
                region: { x: 'padding.left', y: 'padding.top', width: 'f:00', height: {'$sub':['80%','padding.top','padding.bottom']}},
                'price':new yAxis({
                    font: '11px Arial',
                    color: 'black',
                    align: 'right',
                    textBaseline: 'top',
                    dataType: 'number',
                    dataRange: 'range',
                    order:'asc',
                    degree:1
                })
            }
        },
        {
            'main':{
                region: {
                    x: {'$and':['price.x', 'price.width', 3]}, y: {'$and':['price.y', (determineFontHeight('11px Arial')/2)]}
                            , width: {'$sub':['100%','price.width','padding.right','padding.left']}, height: 'price.height',
                },
                'fline': new line({
                        yAxisName: 'price',
                        xAxisName: 'date',
                        xAxisFocus: true,
                        strokeStyle: 'cyan',
                        lineWidth: 1
                    }),
                'kCross': new cross({lineWidth:0.5,xAxisName: 'date',
                            yAxisName: 'price'})
                //,'s': new label({'quadrant':1})
            }
        },
        {
            'date':{
                region: { x: 'main.x', y: {'$and':['main.height', 'main.y', determineFontHeight('11px Arial')/2]}, width: 'main.width', height: 'f:00' },
                'date':new xAxis({
                    font: '11px Arial',
                    color: 'black',
                    align: 'right',
                    textBaseline: 'top',
                    dataType: 'number',
                    dataRange: 'seq',
                    order:'desc'
                })
            }
        }
    ];

    var painter = new painterCrossKline('crossline',paintStream, {});
    painterCrossKline.prototype.preData = function() {
        var price = [0,8];
        var date = [0,1,2,3,4,5,6];
    
        var fline = [];
        fline.push([0,1]);
        fline.push([1,7]);
        fline.push([2,7]);
        fline.push([3,7]);
        fline.push([4,1]);
        fline.push([5,1]);
        fline.push([6,3]);
        this.data.price = price;
        this.data.date = date;
        this.data.fline = fline;
       
    }
    painterCrossKline.prototype.start = function () {
        this.ctx.beginPath();
        this.ctx.strokeStyle = 'gray';
        this.ctx.save();
        this.ctx.translate(this.paintRegion['main.x']
                       , this.paintRegion['main.y']);

        this.ctx.rect(0, 0
                       , this.paintRegion['main.width']
                       , this.paintRegion['main.height']);
        this.ctx.stroke();
                    
        this.ctx.restore();
    }

    painter.padding.top = 10;
    painter.padding.left = 10;
    painter.padding.right = 20;
    painter.padding.bottom = 10;
    painter.init();

    painter.build();
    painter.build(true);

    //painter.implements.priceY.isTouch.call(painter, 1, 1);
</script>
</html>
