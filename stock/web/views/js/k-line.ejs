function kLine(options) {
  this.options = options;
  if (typeof this.options.yAxisName === 'undefined') this.options.yAxisName = 'yAxis';
  if (typeof this.options.xAxisName === 'undefined') this.options.xAxisName = 'xAxis';
  this.options.yAxis = new yAxis({});
  this.options.xAxis = new xAxis({});
  if (typeof this.options.axial === 'undefined') this.options.axial = 'ver'; //'vertical, horizontal'
  //this.options.kLineHeight = 10;
  this.options.kLineWidth = 10;
  this.options.kLineDrawWidth = 10;
  this.options.x = [];
  this.options.y = [];
  this.options.moveAcc = 0;
  this.options.onMove = false;
  if (typeof this.options.control === 'undefined') this.options.control = new control({});
  this.options.range_idx = 0;
}

kLine.prototype = {
    /*
    initialize: function (painter) {
        painter.options = this.options;
        if (typeof painter.options.yAxis === 'string' && typeof painter.implements[painter.options.yAxis] != 'undefined')
            painter.options.yAxis = painter.implements[painter.options.yAxis];
        if (typeof painter.options.xAxis === 'string' && typeof painter.implements[painter.options.xAxis] != 'undefined')
            painter.options.xAxis = painter.implements[painter.options.xAxis];
    },*/
    initialize: function () {
        if (typeof this.implements[this.options.yAxisName] != 'undefined')
            this.options.yAxis = this.implements[this.options.yAxisName];
        if (typeof this.implements[this.options.xAxisName] != 'undefined')
            this.options.xAxis = this.implements[this.options.xAxisName];
        /*
        if (typeof this.implements[this.options.controlbarName] != 'undefined') {
            this.options.controlbar = this.implements[this.options.controlbarName];
            this.options.controlbar.options.load = true;
        }*/
    },
    start: function () {
        var ctx = this.ctx;
        ctx.save();
        ctx.translate(this.paintRegion[paintName + '.x'], this.paintRegion[paintName + '.y']);
        this.options.xAxis.options.x = [];
        this.options.xAxis.options.y = [];
        this.options.x = [];
        this.options.y = [];
        this.options.range_idx = 0;
    },
    end: function () { 
        this.ctx.restore();
        if (this.options.xAxis.options.dataRange === 'seq') {
            this.options.xAxis.options.build = true;
        } else if (this.options.yAxis.options.dataRange === 'seq') {
            this.options.yAxis.options.build = true;
        }
    },
    getDataLength : function() {
        if (Object.prototype.toString.call(this.data[this.implName]) === '[object Array]') {
            this.options.yAxis.getYScale.call(this, this.options.yAxis.options, this.data[this.implName])
            this.options.xAxis.getXScale.call(this, this.options.xAxis.options, this.data[this.implName])
        }
        var dataRange = 'seq';
        var diff = 0;
        if (this.options.axial === 'ver') {
            if (this.options.xAxis.options.dataRange === 'seq') {
                this.options.kLineWidth = (this.paintRegion[paintName + '.width'] / this.data[this.implName].length);
            } else if (this.options.xAxis.options.dataRange === 'range') {
                if (this.options.xAxis.options.order == 'desc')
                    diff = convertFormat(this.options.xAxis.options.last, this.options.xAxis.options.dataType)
                         - convertFormat(this.data[this.implName][0][0], this.options.xAxis.options.dataType);
                else
                    diff = convertFormat(this.data[this.implName][0][0], this.options.xAxis.options.dataType)
                         - convertFormat(this.options.xAxis.options.first, this.options.xAxis.options.dataType);
                this.options.kLineWidth = (this.paintRegion[paintName + '.width'] / (diff));
                dataRange = 'range';
            }
        } else if (this.options.axial === 'hor') {
            if (this.options.yAxis.options.dataRange === 'seq') {
                this.options.kLineWidth = (this.paintRegion[paintName + '.height'] / this.data[this.implName].length);
            } else if (this.options.yAxis.options.dataRange === 'range') {
                if (this.options.yAxis.options.order == 'desc')
                    diff = convertFormat(this.options.yAxis.options.high, this.options.yAxis.options.dataType)
                         - convertFormat(this.data[this.implName][0][1], this.options.yAxis.options.dataType);
                else
                    diff = convertFormat(this.data[this.implName][0][1], this.options.yAxis.options.dataType)
                         - convertFormat(this.options.yAxis.options.low, this.options.yAxis.options.dataType);
                this.options.kLineWidth = (this.paintRegion[paintName + '.height'] / (diff));
                dataRange = 'range';
            }
        }
        if (dataRange == 'seq')
            return (typeof this.data[this.implName] != 'undefined') ? this.data[this.implName].length : 0;
        else if (dataRange == 'range')
            return diff;
    },
    getX: function (i) {
        return this.implements[this.implName].getXY.call(this, i, this.options.xAxis);
    },
    getY: function (i) {
        return this.implements[this.implName].getXY.call(this, i, this.options.yAxis);
    },
    getXY: function(i, axis) {
        if ((this.options.axial === 'ver' && axis.toString() === 'xAxis') 
         || (this.options.axial === 'hor' && axis.toString() === 'yAxis')) {
            return i * axis.options.scale;
        } else if ((this.options.axial === 'hor' && axis.toString() === 'xAxis')
                || (this.options.axial === 'ver' && axis.toString() === 'yAxis') ) {
            var dataRange = 'seq';
            if (this.options.axial === 'ver' && axis.toString() === 'yAxis')
                dataRange = this.options.xAxis.options.dataRange;
            else if (this.options.axial === 'hor' && axis.toString() === 'xAxis')
                dataRange = this.options.yAxis.options.dataRange;
            if (dataRange == 'seq') {
                var open = this.data[this.implName][i][1];
                var close = this.data[this.implName][i][2];
                var last = this.data[this.implName][i][3];
                var first = this.data[this.implName][i][4];
                var low = this.data[this.implName][i][3];
                var high = this.data[this.implName][i][3];
                var low = this.data[this.implName][i][4];
                //console.log('open:'+open+', close:'+close+', last:'+last+', first'+first);
                if (axis.toString() === 'xAxis') {
                    return [(open - axis.options.first) * axis.options.scale
                          , (close - axis.options.first) * axis.options.scale
                          , (last - axis.options.first) * axis.options.scale
                          , (first- axis.options.first) * axis.options.scale];
                } else {
                    return [(open - axis.options.low) * axis.options.scale
                          , (close - axis.options.low) * axis.options.scale
                          , (high - axis.options.low) * axis.options.scale
                          , (low - axis.options.low) * axis.options.scale];
                }
            } else if (dataRange == 'range') {
                var idx = this.options.range_idx;
                //可能要x軸的起始值才能算
                var val = 0;
                if (this.data[this.implName].length <= idx)
                    return [0,0,0,0];
                if (axis.toString() === 'xAxis') {
                    
                } else {
                    if (this.options.xAxis.options.order == 'desc')
                        val = convertFormat(this.data[this.implName][idx][0], this.options.xAxis.options.dataType) 
                            - convertFormat(this.options.xAxis.options.first, this.options.xAxis.options.dataType);
                    else
                        val = convertFormat(this.data[this.implName][idx][0], this.options.xAxis.options.dataType) 
                            - convertFormat(this.options.xAxis.options.last, this.options.xAxis.options.dataType);
                }
                if (val == i) {
                    var open = this.data[this.implName][idx][1];
                    var close = this.data[this.implName][idx][2];
                    var last = this.data[this.implName][idx][3];
                    var first = this.data[this.implName][idx][4];
                    var low = this.data[this.implName][idx][3];
                    var high = this.data[this.implName][idx][3];
                    var low = this.data[this.implName][idx][4];
                    this.options.range_idx += 1;
                    if (axis.toString() === 'xAxis') {
                        return [(open - axis.options.first) * axis.options.scale
                              , (close - axis.options.first) * axis.options.scale
                              , (last - axis.options.first) * axis.options.scale
                              , (first- axis.options.first) * axis.options.scale];
                    } else {
                        return [(open - axis.options.low) * axis.options.scale
                              , (close - axis.options.low) * axis.options.scale
                              , (high - axis.options.low) * axis.options.scale
                              , (low - axis.options.low) * axis.options.scale];
                    }
                } else {
                    return [0
                          , 0
                          , 0
                          , 0];
                }
            }
        }
    },
    paintItem: function (i, x, y) {
        /*
        if (i == 0) {
            this.ctx.beginPath();
            this.ctx.strokeStyle = 'red';
            this.ctx.moveTo(0, 0);
            this.ctx.lineTo(painter.paintRegion[painter.paintName + '.width'], painter.paintRegion[painter.paintName + '.height']);
            this.ctx.stroke();
        }*/
        this.ctx.beginPath();
        this.ctx.strokeStyle = 'red';
        this.ctx.fillStyle = 'red';
        if (Object.prototype.toString.call(y) === '[object Array]') {
            var w = this.options.kLineWidth;
            var h = y[1] - y[0];
            var yScale = y[1];
            if (y[1] < y[0]) {
                this.ctx.strokeStyle = 'green';
                this.ctx.fillStyle = 'green';
                h = y[0] - y[1];
                yScale = y[0];
            }
            var kLineDrawWidth = w * .7;
            this.options.kLineDrawWidth = kLineDrawWidth;
            this.ctx.rect(x + (w - kLineDrawWidth)/2
                        , this.paintRegion[this.paintName + '.height'] - yScale
                        , kLineDrawWidth
                        , h);
            this.ctx.fill();
            var x_ = x + (w/2);
            this.options.xAxis.options.x.push(x_);
            this.options.x.push(x_);
            this.options.y.push(y);
            /*
            (typeof this.options.xAxis.options.x[i] === 'undefined') ? 
                this.options.xAxis.options.x.push(x_) : this.options.xAxis.options.x[i] = x_;
            (typeof this.options.x[i] === 'undefined') ? 
                this.options.x.push(x_) : this.options.x[i] = x_;
            (typeof this.options.y[i] === 'undefined') ? 
                this.options.y.push(y) : this.options.y[i] = y;
            */
            this.ctx.moveTo(x_, this.paintRegion[this.paintName + '.height'] - y[2]);
            this.ctx.lineTo(x_, this.paintRegion[this.paintName + '.height'] - y[3]);
        } else if (Object.prototype.toString.call(x) === '[object Array]') {
            var h = this.options.kLineWidth;
            var w = x[1] - x[0];
            var xScale = x[1];
            if (x[1] < x[0]) {
                this.ctx.strokeStyle = 'green';
                this.ctx.fillStyle = 'green';
                w = x[0] - x[1];
                xScale = x[0];
            }
            var kLineDrawWidth = h * .7;
            this.options.kLineDrawWidth = kLineDrawWidth;
            this.ctx.rect(this.paintRegion[this.paintName + '.width'] - xScale
                        , y + (h - kLineDrawWidth)/2
                        , w
                        , kLineDrawWidth);
            this.ctx.fill();
            var y_ = y + (h/2);
            this.options.yAxis.options.y.push(y_);
            this.options.x.push(x);
            this.options.y.push(y_);
            /*
            (typeof this.options.yAxis.options.y[i] === 'undefined') ? 
                this.options.yAxis.options.y.push(y_) : this.options.yAxis.options.y[i] = y_;
            (typeof this.options.x[i] === 'undefined') ? 
                this.options.x.push(x) : this.options.x[i] = x;
            (typeof this.options.y[i] === 'undefined') ? 
                this.options.y.push(y_) : this.options.y[i] = y_;*/
                
            this.ctx.moveTo(this.paintRegion[this.paintName + '.width'] - x[2], y_);
            this.ctx.lineTo(this.paintRegion[this.paintName + '.width'] - x[3], y_);
        }
        this.ctx.stroke();
    },
    getName: function() {
        return 'kLine';
    },
    preData: function(data) {
        if (Object.prototype.toString.call(data) != '[object Array]') return;
        if (data.length <= 0) return;
        var chk = 0;
        for (var d in data) {
            //0:day 1:open 2:close 3:high 4:low
            if (data[d].length != 5) {
                chk = 1;
                break;
            }
        }
        if (chk) return;
    },
    mousedown: function(offset) {
        if (this.implement.isTouch.call(this, offset)) {
            //console.log(this.paintName + ' isTouch');
            this.options.onMove = true;
        }
    },
    mousemove: function(offset) {
        //this.options.yAxis.options.build = false;
        if (this.options.onMove) {
            if (this.options.axial === 'ver')
                this.options.moveAcc = this.options.moveAcc + offset.movementX;
            else if (this.options.axial === 'hor')
                this.options.moveAcc = this.options.moveAcc + offset.movementY;
            //console.log('moveAcc:'+this.options.moveAcc+'w:'+ Math.round(this.options.kLineDrawWidth));
            var t = 0;
            if (this.options.moveAcc >= Math.round(this.options.kLineDrawWidth)) {
                t = 1;
                //this.options.controlbar.options.dec = 'add';
            }
            else if (Math.abs(this.options.moveAcc) >= Math.round(this.options.kLineDrawWidth)) {
                t = -1;
                //this.options.controlbar.options.dec = 'sub';
            }
            if (t != 0) {
                //console.log(this.paintName + ' ' +this.options.yAxis.options.dataType);
                /*
                if (this.options.controlbar.options.load) {
                    this.options.controlbar.setNext.call(this.options.controlbar);
                    this.begin = this.options.controlbar.options.begin;
                    this.end = this.options.controlbar.options.end;
                } else {
                    this.begin = this.begin - t * 5;
                    this.end = this.end - t * 5;
                }*/
                this.options.control.options.begin = this.options.control.options.begin - t * 5;
                this.options.control.setNext.call(this.options.control);
                console.log(this.options.control.options.begin + ', ' + this.options.control.options.end);
                this.options.moveAcc = 0;
                
                this.reInit = true;
                this.reBuild = true;
                t = 0;
            }
            //this.implement.end.call(this);
        }
    },    
    mouseup: function(offset) {
        if (this.options.onMove) {
            this.options.onMove = false;
            this.options.moveAcc = 0;
        }
    },
    reBuild: function() {
        if (this.options.axial === 'ver')
            this.options.yAxis.options.build = false;       
        else if (this.options.axial === 'hor')
            this.options.xAxis.options.build = false;
    },
    isTouch: function(offset) {
        if (offset.offsetX >= this.paintRegion[this.paintName + '.x']
         && offset.offsetY >= this.paintRegion[this.paintName + '.y']
         && offset.offsetX <= this.paintRegion[this.paintName + '.x'] + this.paintRegion[this.paintName + '.width']
         && offset.offsetY <= this.paintRegion[this.paintName + '.y'] + this.paintRegion[this.paintName + '.height'])
            return true;
        return false;
    }
};
