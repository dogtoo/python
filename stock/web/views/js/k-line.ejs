function kLine(options) {
  this.options = options;
  if (typeof this.options.yAxis === 'undefined') this.options.yAxis = new yAxis({});
  if (typeof this.options.xAxis === 'undefined') this.options.xAxis = new xAxis({});
  if (typeof this.options.lineHeight === 'undefined') this.options.lineHeight = 10;
  if (typeof this.options.lineWidth === 'undefined') this.options.lineWidth = 10;
}

kLine.prototype = {
    /*
    initialize: function (painter) {
        painter.options = this.options;
        if (typeof painter.options.yAxis === 'string' && typeof painter.implements[painter.options.yAxis] != 'undefined')
            painter.options.yAxis = painter.implements[painter.options.yAxis];
        if (typeof painter.options.xAxis === 'string' && typeof painter.implements[painter.options.xAxis] != 'undefined')
            painter.options.xAxis = painter.implements[painter.options.xAxis];
    },*/
    initialize: function () {
        
    },
    start: function () {
        var ctx = this.ctx;
        ctx.save();
        ctx.translate(this.paintRegion[paintName + '.x'], this.paintRegion[paintName + '.y']);
        
        if (typeof this.options.yAxis === 'string' && typeof painter.implements[this.options.yAxis] != 'undefined')
            this.options.yAxis = painter.implements[this.options.yAxis];
        if (typeof this.options.xAxis === 'string' && typeof painter.implements[this.options.xAxis] != 'undefined')
            this.options.xAxis = painter.implements[this.options.xAxis];
    },
    end: function () { 
        this.ctx.restore();
        if (this.options.xAxis.options.dataRange === 'seq') {
            this.options.xAxis.options.build = true;
        } else if (this.options.yAxis.options.dataRange === 'seq') {
            this.options.yAxis.options.build = true;
        }
    },
    getDataLength : function() {
        if (typeof this.options.yAxis.getYScale === 'function')
            this.options.yAxis.getYScale(painter.data[painter.implName])
        else
            return 0;
        if (typeof this.options.xAxis.getXScale === 'function')
            this.options.xAxis.getXScale(painter.data[painter.implName])
        else
            return 0;
        if (this.options.xAxis.options.dataRange === 'seq') {
            painter.options.lineWidth = (this.paintRegion[paintName + '.width'] / this.data[this.implName].length);
        } else if (this.options.xAxis.options.dataRange === 'range') {
            painter.options.lineWidth = (this.paintRegion[paintName + '.width'] / (this.options.xAxis.options.last - this.options.xAxis.options.first));
        }

        if (this.options.yAxis.options.dataRange === 'seq') {
            painter.options.lineHeight = (this.paintRegion[paintName + '.height'] / this.data[this.implName].length);
        } else if (this.options.yAxis.options.dataRange === 'range') {
            painter.options.lineHeight = (this.paintRegion[paintName + '.height'] / (this.options.yAxis.options.high - this.options.yAxis.options.low));

        }
        return (typeof this.data[this.implName] != 'undefined') ? this.data[this.implName].length : 0;
    },
    getX: function (i) {
        if (this.options.xAxis.options.dataRange === 'seq') {
            return i * this.options.xAxis.options.xScale;
        } else if (this.options.xAxis.options.dataRange === 'range') {
            var open = this.data[this.implName][i][1];
            var close = this.data[this.implName][i][2];
            var last = this.data[this.implName][i][3];
            var first = this.data[this.implName][i][4];
            //console.log('open:'+open+', close:'+close+', last:'+last+', first'+first);
            return [(open - this.options.xAxis.options.first) * this.options.xAxis.options.xScale
                  , (close - this.options.xAxis.options.first) * this.options.xAxis.options.xScale
                  , (last - this.options.xAxis.options.first) * this.options.xAxis.options.xScale
                  , (first- this.options.xAxis.options.first) * this.options.xAxis.options.xScale];
        }
    },
    getY: function (i) {
        if (this.options.yAxis.options.dataRange === 'seq') {
            return i * this.options.yAxis.options.yScale;
        } else if (this.options.yAxis.options.dataRange === 'range') {
            var open = this.data[this.implName][i][1];
            var close = this.data[this.implName][i][2];
            var high = this.data[this.implName][i][3];
            var low = this.data[this.implName][i][4];
            //console.log('open:'+open+', close:'+close+', high:'+high+', low'+low);
            return [(open - this.options.yAxis.options.low) * this.options.yAxis.options.yScale
                  , (close - this.options.yAxis.options.low) * this.options.yAxis.options.yScale
                  , (high - this.options.yAxis.options.low) * this.options.yAxis.options.yScale
                  , (low - this.options.yAxis.options.low) * this.options.yAxis.options.yScale];
        }
    },
    paintItem: function (i, x, y) {
        /*
        if (i == 0) {
            this.ctx.beginPath();
            this.ctx.strokeStyle = 'red';
            this.ctx.moveTo(0, 0);
            this.ctx.lineTo(painter.paintRegion[painter.paintName + '.width'], painter.paintRegion[painter.paintName + '.height']);
            this.ctx.stroke();
        }*/
        this.ctx.beginPath();
        this.ctx.strokeStyle = 'red';
        this.ctx.fillStyle = 'red';
        if (Object.prototype.toString.call(y) === '[object Array]') {
            var w = painter.options.lineWidth;
            var h = y[1] - y[0];
            var yScale = y[1];
            if (y[1] < y[0]) {
                this.ctx.strokeStyle = 'green';
                this.ctx.fillStyle = 'green';
                h = y[0] - y[1];
                yScale = y[0];
            }
            this.ctx.rect(x + (w - w*.7)/2, painter.paintRegion[painter.paintName + '.height'] - yScale, w*.7, h);
            this.ctx.fill();
            //這邊這樣做是錯的，因為impl流程init沒將x[]只清一次
            if (this.options.xAxis.options.x.length < this.data[this.implName].length)
                this.options.xAxis.options.x.push(x + (w/2));
            this.ctx.moveTo(x + (w/2), painter.paintRegion[painter.paintName + '.height'] - y[2]);
            this.ctx.lineTo(x + (w/2), painter.paintRegion[painter.paintName + '.height'] - y[3]);
        } else if (Object.prototype.toString.call(x) === '[object Array]') {
            var h = painter.options.lineHeight;
            var w = x[1] - x[0];
            var xScale = x[1];
            if (x[1] < x[0]) {
                this.ctx.strokeStyle = 'green';
                this.ctx.fillStyle = 'green';
                w = x[0] - x[1];
                xScale = x[0];
            }
            this.ctx.rect(painter.paintRegion[painter.paintName + '.width'] - xScale, y, w, h);
            this.ctx.fill();
            this.ctx.moveTo(painter.paintRegion[painter.paintName + '.width'] - x[2], y + (painter.options.lineHeight/2));
            this.ctx.lineTo(painter.paintRegion[painter.paintName + '.width'] - x[3], y + (painter.options.lineHeight/2));
        }
        this.ctx.stroke();
    },
    getName: function() {
        return 'kLine';
    },
    preData: function(data) {
        if (Object.prototype.toString.call(data) != '[object Array]') return;
        if (data.length <= 0) return;
        var chk = 0;
        for (var d in data) {
            //0:day 1:open 2:close 3:high 4:low
            if (data[d].length != 5) {
                chk = 1;
                break;
            }
        }
        if (chk) return;
    }
};

