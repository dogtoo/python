function controlbar(options) {
    control.call(this, options);
    this.options = options;
    //if (typeof this.options.step === 'undefined') this.options.step = 1;
    if (typeof this.options.order === 'undefined') this.options.order = 'asc';
    if (typeof this.options.axial  === 'undefined') this.options.axial = 'ver';
    if (typeof this.options.datasource  === 'undefined') this.options.datasource = '';
    if (typeof this.options.barButtonWidth === 'undefined') this.options.barButtonWidth = 15;
    this.options.load = false;
    this.options.onMove = false;
    this.options.scale = 0;
    this.options.isButtonTouch = false;
    this.options.isButtonTouchR = false;
    this.options.isButtonTouchL = false;
}

//controlbar.prototype = control.prototype;

controlbar.prototype = {
    initialize : function () {
        this.options = this.data[this.implName];
        if (!this.reBuild) {
            if (this.options.datasource != '') {
                this.options.length = this.data[this.data[this.implName].datasource].length;
            }
            this.implement.getScale.call(this, this.options, this.data[this.options.datasource]);
            //this.implement.getScale.call(this, this.options, this.data[this.data[this.implName].datasource]);
        }
        //this.data[this.implName] = $.extend(true, {}, this.options);
        if (typeof this.implements[this.implName] != 'undefined')
            this.implements[this.implName].options = this.data[this.implName];
    },
    start : function () {
        var ctx = this.ctx;
        this.options = this.data[this.implName];
        ctx.save();
        if (typeof this.options.color == 'string') ctx.fillStyle = this.options.color;
        ctx.translate(this.paintRegion[paintName + '.x'], this.paintRegion[paintName + '.y']);
    },
    end : function () {
        this.ctx.restore();
        this.options.build = true;
    },
    paintItems : function() {
        var fl = this.options.begin * this.options.scale;
        var ll = this.options.end * this.options.scale;
        var pWidth = this.paintRegion[this.paintName + '.width'];
        var pHeight = this.paintRegion[this.paintName + '.height'];
        var barW =this.options.barButtonWidth;
        if (this.options.axial === 'ver') {
            this.ctx.rect(fl
                        , 0
                        , ll - fl
                        , pHeight);

            this.ctx.rect(fl - barW/2
                        , pHeight-pHeight*.8
                        , barW
                        , pHeight-pHeight*.4);
            
            this.ctx.rect(ll - barW/2
                        , pHeight-pHeight*.8
                        , barW
                        , pHeight-pHeight*.4);
        } else if (this.options.axial === 'hor') {
            this.ctx.rect(fl
                        , 0
                        , ll - fl
                        , pWidth);

            this.ctx.rect(fl - barW/2
                        , pWidth-pWidth*.8
                        , barW
                        , pWidth-pWidth*.4);
            
            this.ctx.rect(ll - barW/2
                        , pWidth-pWidth*.8
                        , barW
                        , pWidth-pWidth*.4);
            
        }
        this.ctx.stroke();
    },
    toString: function() {
        return 'controlbar';
    },
    mousedown: function(offset) {
        this.options = this.data[this.implName];
        if (this.implement.isTouch.call(this, offset)) {
            //console.log(this.paintName + ' isTouch');
            this.options.onMove = true;
        }
    },
    setNext: function() {
        if (this.options.order === 'asc') {
            if (this.options.begin < 0) {
                this.options.begin = 0;
            }
            this.options.end = this.options.begin + this.options.range - 1;
            if (this.options.end > this.options.length) {
                this.options.end = this.options.length - 1;
                this.options.begin = this.options.end - this.options.range + 1;
            }
        } else if (this.options.order === 'desc') {
            if (!this.options.load) {
                var t_ = 0;
                this.options.begin = this.options.length - this.options.begin - 1;
                this.options.end = this.options.begin - this.options.range + 1;
                t_ = this.options.end;
                this.options.end = this.options.begin;
                this.options.begin = t_;
                this.options.load = true;
            } else {
                if (this.options.begin < 0) {
                    this.options.begin = 0;
                }
                this.options.end = this.options.begin + this.options.range - 1;
                if (this.options.end > this.options.length) {
                    this.options.end = this.options.length - 1;
                    this.options.begin = this.options.end - this.options.range + 1;
                }
                //console.log('begin :' + this.options.begin + ', end :' + this.options.end);
            }
            
        }
    },
    mousemove: function(offset) {
        this.options = this.data[this.implName];
        if (this.options.onMove) {
            if (this.options.isButtonTouch) {
                var b = '';
                if (this.options.isButtonTouchR) {
                    b = 'R';
                    if (this.options.axial === 'ver' && offset.movementX != 0) {
                        //this.options.range += offset.movementX;
                        this.options.range = Math.round((Math.round(this.options.range * this.options.scale) + offset.movementX)/ this.options.scale);
                    } else if (this.options.axial === 'hor' && offset.movementY != 0) {
                        this.options.range += offset.movementY;
                    }
                } else {
                    b = 'L';
                    if (this.options.axial === 'ver' && offset.movementX != 0) {
                        //this.options.range += offset.movementX * -1;
                        //this.options.begin += offset.movementX;
                        this.options.range = Math.round((Math.round(this.options.range * this.options.scale) + offset.movementX*-1)/ this.options.scale);
                        this.options.begin = Math.round((Math.round(this.options.begin * this.options.scale) + offset.movementX)/ this.options.scale);
                    } else if (this.options.axial === 'hor' && offset.movementY != 0) {
                        this.options.range += offset.movementY;
                    }
                }
                this.implement.setNext.call(this);
                
                console.log('contrmove '+b+'('+ this.options.begin
                          + ',' + this.options.end
                          + ',' + this.options.range
                +')');
            } else {
                if (this.options.axial === 'ver' && offset.movementX != 0) {
                    /*console.log('contrmove('+ (Math.round(this.options.begin * this.options.scale) + this.paintRegion[this.paintName + '.x'])
                              + ',' + offset.movementX 
                              + ',' + Math.round((Math.round(this.options.begin * this.options.scale) + this.paintRegion[this.paintName + '.x'] + offset.movementX)/ this.options.scale));*/
                    this.options.begin = Math.round((Math.round(this.options.begin * this.options.scale) + offset.movementX)/ this.options.scale);
                    this.implement.setNext.call(this);
                } else if (this.options.axial === 'hor' && offset.movementY != 0) {
                    this.options.begin = Math.round((offset.offsetY- this.paintRegion[this.paintName + '.y'])/ this.options.scale);
                    this.implement.setNext.call(this);
                }
            }
            this.reInit = true;
            this.reBuild = true;
            
        }
    },    
    mouseup: function(offset) {
        if (this.options.onMove) {
            this.options.onMove = false;
            this.options.isButtonTouch = false;
            this.options.isButtonTouchR = false;
            this.options.isButtonTouchL = false;
        }
    },
    reBuild: function() {
        
    },
    isTouch: function(offset) {
        if (offset.offsetX >= this.paintRegion[this.paintName + '.x']
         && offset.offsetY >= this.paintRegion[this.paintName + '.y']
         && offset.offsetX <= this.paintRegion[this.paintName + '.x'] + this.paintRegion[this.paintName + '.width']
         && offset.offsetY <= this.paintRegion[this.paintName + '.y'] + this.paintRegion[this.paintName + '.height']) {
            var fl = this.options.begin * this.options.scale;
            var ll = this.options.end * this.options.scale;
            var pWidth = this.paintRegion[this.paintName + '.width'];
            var pHeight = this.paintRegion[this.paintName + '.height'];
            var barW =this.options.barButtonWidth;
            var pw = 0;
            
            if (this.options.axial === 'ver') {
                pw = pHeight;
                fl = fl + this.paintRegion[this.paintName + '.x'] - barW/2;
                ll = ll + this.paintRegion[this.paintName + '.x'] + barW/2;
            } else if (this.options.axial === 'hor') {
                pw = pWidth;
                fl = fl + this.paintRegion[this.paintName + '.y'] - barW/2;
                ll = ll + this.paintRegion[this.paintName + '.y'] + barW/2;
            }
            
            if (offset.offsetX >= fl && offset.offsetX <= ll) {
                if (offset.offsetX >= fl && offset.offsetX <= fl + barW) {
                    this.options.isButtonTouch = true;
                    this.options.isButtonTouchL = true;
                }
                if (offset.offsetX <= ll && offset.offsetX >= ll - barW) {
                    this.options.isButtonTouch = true;
                    this.options.isButtonTouchR = true;
                }
                return true;
            }
         }
        return false;
    },
    getScale: function(options, data) {
        if (options.axial === 'ver') {
            if (this.paintRegion.hasOwnProperty(this.paintName + '.width'))
                options.scale = this.paintRegion[this.paintName + '.width'] / data.length;
        } else if (options.axial === 'hor') {
            if (this.paintRegion.hasOwnProperty(this.paintName + '.height'))
                options.scale = this.paintRegion[this.paintName + '.height'] / Math.abs(options.high - options.low);
        }
    }
}
