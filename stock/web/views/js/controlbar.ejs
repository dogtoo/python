function controlbar(options) {
  this.options = options;
  if (typeof this.options.begin === 'undefined')  this.options.begin = 0;
  if (typeof this.options.end === 'undefined')    this.options.end = 0;
  if (typeof this.options.length === 'undefined') this.options.length = 0;
  if (typeof this.options.range === 'undefined') this.options.range = 0;
  if (typeof this.options.step === 'undefined') this.options.step = 1;
  if (typeof this.options.dec === 'undefined') this.options.dec = 'add'; //add:+ / sub:-
  if (typeof this.options.order === 'undefined') this.options.order = 'asc';
  if (typeof this.options.axial  === 'undefined') this.options.axial = 'ver';
  this.options.moveAcc = 0;
  this.options.onMove = false;
}

controlbar.prototype = {
    initialize : function () {
        if (!this.options.build) {
            this.options.begin = 0;
            this.options.end = 0;
        }
        if (this.options.length == 0 || this.options.range == 0) return;
        if (this.options.order === 'asc') {
            this.options.end = this.options.begin + this.options.range - 1;
        } else if (this.options.order === 'desc') {
            this.options.begin = this.options.length - this.options.range;
        }
    },
    start : function () {
        var ctx = this.ctx;
        ctx.save();
        if (typeof this.options.color == 'string') ctx.fillStyle = this.options.color;
        ctx.translate(this.paintRegion[paintName + '.x'], this.paintRegion[paintName + '.y']);
    },
    end : function () {
        this.ctx.restore();
        this.options.build = true;
    },
    paintItems : function() {
        
    },
    toString: function() {
        return 'controlbar';
    },
    mousedown: function(offset) {
        if (this.implement.isTouch.call(this, offset)) {
            //console.log(this.paintName + ' isTouch');
            this.options.onMove = true;
        }
    },
    setNext: function() {
        var dec = 1;
        var step = this.options.step;
        if (this.options.order === 'asc') {
            if (this.options.dec === 'sub') dec = -1;
            if (this.options.begin + (this.options.step * dec) < 0 ) return;
            if (this.options.end + (this.options.step * dec) > this.options.length ) step = this.options.length- this.options.end;
            this.options.begin = this.options.begin + (this.options.step * dec);
            this.options.end = this.options.end + (this.options.step * dec);
            
            
        } else if (this.options.order === 'desc') {
            this.options.begin = this.options.begin +this.options.step;
            this.options.end = this.options.end +this.options.step;
        }
    },
    mousemove: function(offset) {
        if (this.options.onMove) {
            if (this.options.axial === 'ver')
                this.options.moveAcc = this.options.moveAcc + offset.movementX;
            else if (this.options.axial === 'hor')
                this.options.moveAcc = this.options.moveAcc + offset.movementY;
            //console.log('moveAcc:'+this.options.moveAcc+'w:'+ Math.round(this.options.kLineDrawWidth));
            var t = 0;
            if (this.options.moveAcc >= Math.round(this.options.kLineDrawWidth))
                t = 1;
            else if (Math.abs(this.options.moveAcc) >= Math.round(this.options.kLineDrawWidth))
                t = -1;
            if (t != 0) {
                //console.log(this.paintName + ' ' +this.options.yAxis.options.dataType);
                this.options.moveAcc = 0;
                this.begin = this.begin - t;
                this.end = this.end - t;
                //console.log('begin:'+this.begin+', end:'+this.end );
                this.reInit = true;
                this.reBuild = true;
                t = 0;
            }
        }
        if (this.reBuild) {
            this.options.yAxis.options.build = false;       
        }
    },    
    mouseup: function(offset) {
        if (this.options.onMove) {
            this.options.onMove = false;
            this.options.moveAcc = 0;
        }
    },
    isTouch: function(x, y) {
        if (offset.offsetX >= this.paintRegion[this.paintName + '.x']
         && offset.offsetY >= this.paintRegion[this.paintName + '.y']
         && offset.offsetX <= this.paintRegion[this.paintName + '.width']
         && offset.offsetY <= this.paintRegion[this.paintName + '.height'])
            return true;
        return false;
    }
}
