    var painterKline = function(canvasId) {
        {
            var fline = new line({
                        yAxisName: 'price',
                        xAxisName: 'date',
                        xAxisFocus: true,
                        strokeStyle: 'cyan',
                        lineWidth: 1
                    });
            var tline = new line({
                        yAxisName: 'price',
                        xAxisName: 'date',
                        xAxisFocus: true,
                        strokeStyle: 'limegreen',
                        lineWidth: 1
                    });
            var sline = new line({
                        yAxisName: 'price',
                        xAxisName: 'date',
                        xAxisFocus: true,
                        strokeStyle: 'magenta',
                        lineWidth: 1
                    });
            
            var paintStream = [
                {
                    'price':{
                        region: { x: 'padding.left', y: 'padding.top', width: 'f:00.00', height: '55%' },
                        'price':new yAxis({
                            font: '11px Arial',
                            color: 'black',
                            align: 'right',
                            textBaseline: 'top',
                            dataType: 'money',
                            dataRange: 'range'
                        })
                    }
                },
                {
                    'main':{
                        region: {
                            x: {'$and':['price.x', 'price.width', 3]}, y: {'$and':['price.y', (determineFontHeight('11px Arial')/2)]}
                            , width: {'$sub':['100%','price.width','padding.right','padding.left']}, height: '55%',
                            riseColor: 'red',
                            fallColor: 'green',
                            normalColor: 'black',
                            chartMargin:{left:45.5,top:20.5,right:20.5},
                            barWidth: 5, spaceWidth: 2, lineStyle: 'solid', borderColor: 'gray', splitLineColor: '#eeeeee', lineWidth: 1
                        },
                        'kline':new kLine({
                            lineStyle: 'solid',
                            yAxisName: 'price',
                            xAxisName: 'date'
                        }),
                        'fline': fline,
                        'tline': tline,
                        'sline': sline,
                        'kCross': new cross({
                            xAxisName: 'kline'
                        })
                    }
                },
                {
                    'date':{
                        region: { x: 'main.x', y: {'$and':['main.height', 'main.y', determineFontHeight('11px Arial')/2]}, width: 'main.width', height: 'f:00-00-00' },
                        'date':new xAxis({
                            font: '11px Arial',
                            color: 'black',
                            align: 'right',
                            textBaseline: 'top',
                            dataType: 'date',
                            dataRange: 'seq'
                        })
                    }
                },
                {
                    'volume':{
                        region: { x: 'price.x', y: {'$and':['price.height', 'price.y', {'$mul':['date.height',2]}]}, width: 'f:0000', height: '18%' },
                        'volumeY':new yAxis({
                            font: '11px Arial',
                            color: 'black',
                            align: 'right',
                            textBaseline: 'top',
                            dataType: 'number',
                            dataRange: 'range'
                        })
                    }
                },
                {
                    'volmain':{
                        region: { x: 'main.x', y: {'$and':['volume.y', determineFontHeight('11px Arial')/2]}, width: 'main.width', height: '18%' },
                        'volKline':new kLine({
                            lineWidth: 1,
                            lineStyle: 'solid',
                            yAxisName: 'volumeY',
                            xAxisName: 'date'
                        }),
                        'mCross': new cross({
                            xAxisName: 'kline'
                        })
                    }
                },
                {
                    'yHistory':{
                        region: { x: 'price.x', y: {'$and':['volume.height', 'volmain.y', determineFontHeight('11px Arial')/2]}, width: 'f:00.00', height: '12%' },
                        'yHistory':new yAxis({
                            font: '11px Arial',
                            color: 'black',
                            align: 'right',
                            textBaseline: 'top',
                            dataType: 'money',
                            dataRange: 'range'
                        })
                    }
                },
                {
                    'history':{
                        region: { x: 'main.x', y: {'$and':['yHistory.y', determineFontHeight('11px Arial')/2]}, width: 'main.width', height: '12%' },
                        'hline':new line({
                            yAxisName: 'yHistory',
                            strokeStyle: 'magenta',
                            lineWidth: 1
                        }),
                        'hisbar': new controlbar({})
                    }
                }
            ];
        }
        Painter.call(this, canvasId, paintStream);
    };
    
    painterKline.prototype = Object.create(Painter.prototype);
    painterKline.prototype.constructor = painterKline;
    painterKline.prototype.preData = function() {
        var kline = [];

        var fline = [];
        var tline = [];
        var sline = [];

        var priceL = [];
        var dateL = [];
        var price = {};
        var date = {};
        
        var volume = [0];
        var volKline = [];
        
        var yHistory = {};
        var hline = [];
        
        for (var i =ã€€0; i < this.data.length; i++) {
            var rawData = this.data[i];
            yHistory[Number(rawData['high'])] = 1;
            yHistory[Number(rawData['low'])] = 1;
            hline.push([rawData['quoteTime'], rawData['close']]);
            if (i >= this.data['hisbar'].begin && i <= this.data['hisbar'].end) {
                price[Number(rawData['high'])] = 1;
                price[Number(rawData['low'])] = 1;
                date[rawData['quoteTime']] = 1;
                kline.push([rawData['quoteTime']
                          , rawData['open']
                          , rawData['close']
                          , rawData['high']
                          , rawData['low'] ]);

                fline.push(MACount(5, i, this.data));
                tline.push(MACount(10, i, this.data));
                sline.push(MACount(20, i, this.data));
                
                volume.push(rawData['volume']);
                if (rawData['close'] > rawData['open'])
                    volKline.push([rawData['quoteTime'], 0, rawData['volume'], 0, rawData['volume'] ]);
                else
                    volKline.push([rawData['quoteTime'], rawData['volume'], 0,  rawData['volume'], 0]);
                    
            }
        }
        //console.log('kline.length = ' + kline.length + ', begin = ' + cb.options.begin + ', end = ' + cb.options.end);
        this.data.kline = kline;
        this.data.fline = fline;
        this.data.tline = tline;
        this.data.sline = sline;

        for (var pk in price)
            priceL.push(pk);

        priceL.sort(function(a, b) {
            return a - b;
        });
        this.data.price = priceL;
        //Object.keys(price).reduce((a, c) => (a[c] = price[c], a), {});

        for (var dk in date)
            dateL.push(dk);

        dateL.sort(function(a, b) {
            return a - b;
        });
        this.data.date = dateL;

        volume.sort(function(a, b) {
            return a - b;
        });
        this.data.volumeY = volume;
        
        this.data.volKline = volKline;
        
        var yHistoryL = [];
        for (var pk in yHistory)
            yHistoryL.push(pk);

        yHistoryL.sort(function(a, b) {
            return a - b;
        });
        this.data.yHistory = yHistoryL;
        this.data.hline = hline;
    }
    painterKline.prototype.start = function () {
        this.ctx.beginPath();
        this.ctx.strokeStyle = 'gray';
        this.ctx.save();
        this.ctx.translate(this.paintRegion['main.x']
                       , this.paintRegion['main.y']);

        this.ctx.rect(0, 0
                       , this.paintRegion['main.width']
                       , this.paintRegion['main.height']);
        this.ctx.stroke();
        var spaceHeight = 0;

        for (var i in this.implements.price.options.y) {
            this.drawHLine('#eeeeee', 0, this.implements.price.options.y[i], this.paintRegion['main.width'], 1, 'solid');
            this.ctx.stroke();
        }

        var v_c = Math.round((this.implements.date.options.x.length)/this.implements.date.options.verticalLineCount);
        for (var i = 0 ; i < this.implements.date.options.x.length ; i+= v_c) {
            var diff = this.implements.date.options.x.length - i;
            if (diff < v_c) v_c = diff;
            this.drawVLine('#eeeeee', this.implements.date.options.x[i], 0,this.paintRegion['main.height'], 1, 'solid');
            this.ctx.stroke();
        }
        this.drawVLine('#eeeeee', 0, 0,0, 1, 'solid');
        this.ctx.stroke();
        this.ctx.restore();
        
        this.ctx.save();
        this.ctx.translate(this.paintRegion['volmain.x']
                       , this.paintRegion['volmain.y']);
        
        this.ctx.rect(0, 0
                       , this.paintRegion['volmain.width']
                       , this.paintRegion['volmain.height']);
                       this.ctx.stroke();
        
        
        for (var i in this.implements.volumeY.options.y) {
            this.drawHLine('#eeeeee', 0, this.implements.volumeY.options.y[i], this.paintRegion['main.width'], 1, 'solid');
            this.ctx.stroke();
        }
        
        
        
        var v_c = Math.round((this.implements.date.options.x.length)/this.implements.date.options.verticalLineCount);
        for (var i = 0 ; i < this.implements.date.options.x.length ; i+= v_c) {
            var diff = this.implements.date.options.x.length - i;
            if (diff < v_c) v_c = diff;
            this.drawVLine('#eeeeee', this.implements.date.options.x[i], 0,this.paintRegion['volume.height'], 1, 'solid');
        }
            
        this.ctx.restore();
    }
    
    painterKline.prototype.load = function(control, data) {
        this.data = data.kline;
        
        this.control.options = $.extend(true, {}, control.options);
        this.control.__proto__ = control.__proto__;
        this.control.options.length = data.kline.length;
        this.control.setNext.call(this.control);
        this.data['hisbar'] = this.control.options;
        //console.log(this.control.options.begin + ', ' + this.control.options.end);
    };
    painterKline.prototype.make = function() {
        this.init();
        this.build();
        this.build(true);
    }

    function MACount(maType, date, data) {
        maType = maType - 1;
        var MA = 0;
        if (maType > 50)
            console.log(maType + "date:" + date);
        if (date > maType) {
            for (var ma = date-maType-1; ma <= date-1; ma++)
                MA = MA + data[ma]['close'];
            return [data[ma]['quoteTime'], (MA / (maType+1))];
        } else {
            return [null, null];
        }
    }
