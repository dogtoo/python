function line(options) {
  this.options = options;
  if (typeof this.options.yAxis === 'undefined') this.options.yAxis = new yAxis({});
  if (typeof this.options.xAxis === 'undefined') this.options.xAxis = new xAxis({});
  if (typeof this.options.strokeStyle === 'undefined') this.options.strokeStyle = 'red';
  this.options.prevX = null;
  this.options.prevY = null;
  if (typeof this.options.disX === 'undefined') this.options.disX = 0;
  if (typeof this.options.disY === 'undefined') this.options.disY = 0;
  if (typeof this.options.lineWidth === 'undefined') this.options.lineWidth = 10;
}

line.prototype = {
    /*
    initialize: function (painter) {
        painter.options = this.options;
        if (typeof painter.options.yAxis === 'string' && typeof painter.implements[painter.options.yAxis] != 'undefined')
            painter.options.yAxis = painter.implements[painter.options.yAxis];
        if (typeof painter.options.xAxis === 'string' && typeof painter.implements[painter.options.xAxis] != 'undefined')
            painter.options.xAxis = painter.implements[painter.options.xAxis];
    },*/
    initialize: function () {
        
    },
    start: function () {
        var ctx = this.ctx;
        ctx.save();
        ctx.translate(this.paintRegion[paintName + '.x'], this.paintRegion[paintName + '.y']);

        this.ctx.beginPath();
        this.ctx.strokeStyle = this.options.strokeStyle;
        this.ctx.lineWidth = this.options.lineWidth;
        
        if (typeof this.options.yAxis === 'string' && typeof painter.implements[this.options.yAxis] != 'undefined')
            this.options.yAxis = painter.implements[this.options.yAxis];
        if (typeof this.options.xAxis === 'string' && typeof painter.implements[this.options.xAxis] != 'undefined')
            this.options.xAxis = painter.implements[this.options.xAxis];
    },
    end: function () {
        this.ctx.stroke();
        this.options.prevX = null;
        this.options.prevY = null;
        this.ctx.restore();
    },
    getDataLength : function() {
        if (typeof this.options.yAxis.getYScale === 'function')
            this.options.yAxis.getYScale(painter.data[painter.implName])
        else
            return 0;
        if (typeof this.options.xAxis.getXScale === 'function')
            this.options.xAxis.getXScale(painter.data[painter.implName])
        else
            return 0;
        return (typeof this.data[this.implName] != 'undefined') ? this.data[this.implName].length : 0;
    },
    getX: function (i) {
        if (this.data[this.implName][i][0] === null) return null;
        if (this.options.xAxis.options.dataRange === 'seq') {
            return (i * this.options.xAxis.options.xScale) + this.options.disX;
        } else if (this.options.xAxis.options.dataRange === 'range') {
            return painter.paintRegion[painter.paintName + '.width'] - (painter.data[painter.implName][i][1]- this.options.xAxis.options.first) * this.options.xAxis.options.xScale + this.options.disX;
        }

    },
    getY: function (i) {
        if (this.data[this.implName][i][1] === null) return null;
        if (this.options.yAxis.options.dataRange === 'seq') {
            return (i * this.options.yAxis.options.yScale) + this.options.disY;
        } else if (this.options.yAxis.options.dataRange === 'range') {
            return painter.paintRegion[painter.paintName + '.height'] - (painter.data[painter.implName][i][1]- this.options.yAxis.options.low) * this.options.yAxis.options.yScale + this.options.disY;
        }
    },
    paintItem: function (i, x, y) {
        /*
        if (i == 0) {
            this.ctx.beginPath();
            this.ctx.strokeStyle = 'red';
            this.ctx.moveTo(0, 0);
            this.ctx.lineTo(painter.paintRegion[painter.paintName + '.width'], painter.paintRegion[painter.paintName + '.height']);
            this.ctx.stroke();
        }*/
        if (x === null && y === null ) return;
        //y =  - y;
        //x =  - x;

        if (this.options.prevX === null && this.options.prevY === null) {
            this.options.prevX  = x;
            this.options.prevY  = y;
            return;
        }

        this.ctx.moveTo(this.options.prevX, this.options.prevY);
        this.ctx.lineTo(x, y);
        this.options.prevX  = x;
        this.options.prevY  = y;
    },
    getName: function() {
        return 'kLine';
    },
    preData: function(data) {
        if (Object.prototype.toString.call(data) != '[object Array]') return;
        if (data.length <= 0) return;
    }
};

