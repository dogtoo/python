function line(options) {
  this.options = options;
  if (typeof this.options.yAxisName === 'undefined') this.options.yAxisName = 'yAxis';
  if (typeof this.options.xAxisName === 'undefined') this.options.xAxisName = 'xAxis';
  if (typeof this.options.xAxisFocus === 'undefined') this.options.xAxisFocus = false;
  if (typeof this.options.yAxisFocus === 'undefined') this.options.yAxisFocus = false;
  this.options.yAxis = new yAxis({});
  this.options.xAxis = new xAxis({});
  this.options.prevX = null;
  this.options.prevY = null;
  //if (typeof this.options.disX === 'undefined') this.options.disX = 0;
  //if (typeof this.options.disY === 'undefined') this.options.disY = 0;
  if (typeof this.options.strokeStyle === 'undefined') this.options.strokeStyle = 'red';
  if (typeof this.options.lineWidth === 'undefined') this.options.lineWidth = 10;
  if (typeof this.options.lineWidth === 'undefined') this.options.lineWidth = 10;
}

line.prototype = {
    /*
    initialize: function (painter) {
        painter.options = this.options;
        if (typeof painter.options.yAxis === 'string' && typeof painter.implements[painter.options.yAxis] != 'undefined')
            painter.options.yAxis = painter.implements[painter.options.yAxis];
        if (typeof painter.options.xAxis === 'string' && typeof painter.implements[painter.options.xAxis] != 'undefined')
            painter.options.xAxis = painter.implements[painter.options.xAxis];
    },*/
    initialize: function () {
        if (typeof this.implements[this.options.yAxisName] != 'undefined')
            this.options.yAxis = this.implements[this.options.yAxisName];
        if (typeof this.implements[this.options.xAxisName] != 'undefined')
            this.options.xAxis = this.implements[this.options.xAxisName];
    },
    start: function () {
        var ctx = this.ctx;
        ctx.save();
        ctx.translate(this.paintRegion[paintName + '.x'], this.paintRegion[paintName + '.y']);
        
        this.ctx.beginPath();
        this.ctx.strokeStyle = this.options.strokeStyle;
        this.ctx.lineWidth = this.options.lineWidth;
    },
    end: function () {
        this.ctx.stroke();
        this.options.prevX = null;
        this.options.prevY = null;
        this.ctx.restore();
    },
    getDataLength : function() {
        if (Object.prototype.toString.call(this.data[this.implName]) === '[object Array]') {
            this.options.yAxis.getYScale.call(this, this.options.yAxis.options, this.data[this.implName])
            this.options.xAxis.getXScale.call(this, this.options.xAxis.options, this.data[this.implName])
        }

        return (typeof this.data[this.implName] != 'undefined') ? this.data[this.implName].length : 0;
    },
    getX: function (i) {
        if (this.data[this.implName][i][0] === null) return null;
        if (this.options.xAxisFocus) {
            //console.log(i + ':' +this.options.xAxis.options.x[i]);
            if (this.options.xAxis.options.dataRange === 'seq') {
                return this.options.xAxis.options.x[i];
            } else if (this.options.xAxis.options.dataRange === 'range') {
                var val = this.data[this.implName][i][0];
                var diff = 0;
                if (this.options.xAxis.options.order == 'desc')
                    diff = convertFormat(val, this.options.xAxis.options.dataType) 
                        - convertFormat(this.options.xAxis.options.first, this.options.xAxis.options.dataType);
                else
                    diff = convertFormat(val, this.options.xAxis.options.dataType) 
                        - convertFormat(this.options.xAxis.options.last, this.options.xAxis.options.dataType);
                return this.options.xAxis.options.x[diff-1];
            }
        } else {
            if (this.options.xAxis.options.dataRange === 'seq') 
                return i * this.options.xAxis.options.scale;
            else if (this.options.xAxis.options.dataRange === 'range') {
                if (this.data[this.implName][i][0] < this.options.yAxis.options.first) this.options.yAxis.options.first = this.data[this.implName][i][0];
                if (this.data[this.implName][i][0] > this.options.yAxis.options.last) this.options.yAxis.options.last = this.data[this.implName][i][0];
                if (typeof this.data[this.options.xAxisName] != 'undefined') {
                    this.data[this.options.xAxisName] = calcRangeValues([this.options.xAxis.options.last, this.options.xAxis.options.first]
                                    , this.options.xAxis.options.verticalLineCount
                                    , this.options.xAxis.options.dataType);
                    if (this.options.xAxis.options.order == 'desc') {
                        this.data[this.options.xAxisName].sort(function(a, b) {
                            return a - b;
                        });
                    }
                }
                var diff = 0;
                if (this.options.xAxis.options.order == 'desc')
                    diff = convertFormat(this.options.xAxis.options.last, this.options.xAxis.options.dataType)
                         - convertFormat(this.data[this.implName][i][0], this.options.xAxis.options.dataType);
                else
                    diff = convertFormat(this.data[this.implName][i][0], this.options.xAxis.options.dataType)
                         - convertFormat(this.options.xAxis.options.first, this.options.xAxis.options.dataType);
                return this.paintRegion[this.paintName + '.width']
                    - this.options.xAxis.options.scale * (diff-1);
            }
        }
        //return this.options.xAxis.getX.call(this, i);
        //return this.options.xAxis.options.x[i];
    },
    getY: function (i) {
        if (this.data[this.implName][i][1] === null) return null;
        if (this.options.yAxisFocus){
            if (this.options.yAxis.options.dataRange === 'seq')
                return this.options.yAxis.options.y[i];
            else if (this.options.yAxis.options.dataRange === 'range') {
                var val = this.data[this.implName][i][1];
                var diff = 0;
                if (this.options.yAxis.options.order == 'desc')
                    diff = convertFormat(val, this.options.yAxis.options.dataType) 
                        - convertFormat(this.options.yAxis.options.low, this.options.yAxis.options.dataType);
                else
                    diff = convertFormat(val, this.options.yAxis.options.dataType) 
                        - convertFormat(this.options.yAxis.options.high, this.options.yAxis.options.dataType);
                return this.options.yAxis.options.y[diff-1];
            }
        } else {
            if (this.options.yAxis.options.dataRange === 'seq') 
                return i * this.options.yAxis.options.scale;
            else if (this.options.yAxis.options.dataRange === 'range') {
                if (this.data[this.implName][i][1] < this.options.yAxis.options.low) this.options.yAxis.options.low = this.data[this.implName][i][1];
                if (this.data[this.implName][i][1] > this.options.yAxis.options.high) this.options.yAxis.options.high = this.data[this.implName][i][1];
                if (typeof this.data[this.options.yAxisName] != 'undefined') {
                    this.data[this.options.yAxisName] = calcRangeValues([this.options.yAxis.options.high, this.options.yAxis.options.low]
                                    , this.options.yAxis.options.horizontalLineCount
                                    , this.options.yAxis.options.dataType);
                    if (this.options.yAxis.options.order == 'desc') {
                        this.data[this.options.yAxisName].sort(function(a, b) {
                            return a - b;
                        });
                    }
                }
                var diff = 0;
                if (this.options.yAxis.options.order == 'desc')
                    diff = convertFormat(this.options.yAxis.options.high, this.options.yAxis.options.dataType)
                         - convertFormat(this.data[this.implName][i][1], this.options.yAxis.options.dataType);
                else
                    diff = convertFormat(this.data[this.implName][i][1], this.options.yAxis.options.dataType)
                         - convertFormat(this.options.yAxis.options.low, this.options.yAxis.options.dataType);
                return this.paintRegion[this.paintName + '.height']
                    - this.options.yAxis.options.scale * (diff);
            }
        }
        //return this.options.yAxis.getY.call(this, i);
        //return this.options.yAxis.options.y[i];
    },
    paintItem: function (i, x, y) {
        /*
        if (i == 0) {
            this.ctx.beginPath();
            this.ctx.strokeStyle = 'red';
            this.ctx.moveTo(0, 0);
            this.ctx.lineTo(painter.paintRegion[painter.paintName + '.width'], painter.paintRegion[painter.paintName + '.height']);
            this.ctx.stroke();
        }*/
        if (x === null || y === null ) return;
        //y =  - y;
        //x =  - x;

        if (this.options.prevX === null && this.options.prevY === null) {
            this.options.prevX  = x;
            this.options.prevY  = y;
            return;
        }

        this.ctx.moveTo(this.options.prevX, this.options.prevY);
        this.ctx.lineTo(x, y);
        this.options.prevX  = x;
        this.options.prevY  = y;
    },
    getName: function() {
        return 'kLine';
    },
    preData: function(data) {
        if (Object.prototype.toString.call(data) != '[object Array]') return;
        if (data.length <= 0) return;
    }
};

