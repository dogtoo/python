function Painter(canvasId, paintStream) {
    this.canvas = document.getElementById(canvasId);
    if (!this.canvas.getContext) return;
    this.ctx = this.canvas.getContext('2d');
    this.data = {};

    this.width = this.canvas.width;
    this.height = this.canvas.height;
    this.paintRegion = {}
    this.padding = {
        'top': 0
       ,'bottom': 0
       ,'left': 0
       ,'right': 0
    }
    this.implements = {}; //paintStream in
    //temp
    this.implement = Object.prototype;
    this.options = {};
    this.paintName = 'absPainter';
    this.implName = 'absPainter';
    this.imgData = {};
    
    this.reInit = false;
    this.reBuild = false;
    this.hadEvenBind = false;//這個應該跟算畫面位置分開因為再拉動時不用再重bind event
    this.onBuild = false;
}
Painter.prototype = {
    init: function() {
        var painter = this;
        if (painter.onBuild) return;
        painter.preData.call(painter);
        paintStream.forEach(function(item, index, array){
            paintName = Object.keys(item)[0];
            painter.addPaintRegion.call(painter, paintName, item[paintName].region.x
                                                          , item[paintName].region.y
                                                          , item[paintName].region.width
                                                          , item[paintName].region.height);
            for (var p in item[paintName]) {
                if (p === 'region') continue;
                implement = item[paintName][p];
                painter.implName = p;
                painter.setImplement(implement, paintName);
                painter.options = painter.implement.options;
                if (typeof painter.implement.initialize == 'function')
                    painter.implement.initialize.call(painter);
                painter.prePaintRegion.call(painter, paintName, 'x');
                painter.prePaintRegion.call(painter, paintName, 'y');
                painter.prePaintRegion.call(painter, paintName, 'width');
                painter.prePaintRegion.call(painter, paintName, 'height');
                if (typeof painter.implement.preData === 'function' && typeof painter.data[p] != 'undefined')
                    painter.implement.preData.call(painter, painter.data[p]);

                painter.implements[painter.implName] = painter.implement;
            }
        });
        
        paintStream.forEach(function(item, index, array){
            paintName = Object.keys(item)[0];
            for (var p in item[paintName]) {
                if (p === 'region') continue;
                implement = item[paintName][p];
                painter.implName = p;
                painter.setImplement(implement, paintName);
                painter.options = painter.implement.options;
                if (typeof painter.implement.initialize == 'function')
                    painter.implement.initialize.call(painter);
            }
        });
/*
        for (var implt in paintStream) {
            console.log(paintStream[implt]);
        }
*/
        //painter.ctx.clearRect(0, 0, painter.width, painter.height);
        if (!this.hadEvenBind) {
            if (isTouchDevice()) {
                addEvent(painter.canvas, 'touchmove', function (e) {
                    //console.log('touchmove:'+e);
                });
            } else {
                addEvent(painter.canvas, 'mousedown', function (e) {
                    var offset = getOffset(e);
                    //console.log('mousemove(x:'+offset.offsetX+',y:'+offset.offsetY+')');
                    painter.moveEvent.call(painter, 'mousedown', offset);
                });
                addEvent(painter.canvas, 'mousemove', function (e) {
                    var offset = getOffset(e);
                    //console.log('mousemove(x:'+offset.offsetX+',y:'+offset.offsetY+')');
                    painter.moveEvent.call(painter, 'mousemove', offset);
                });
                addEvent(painter.canvas, 'mouseup', function (e) {
                    var offset = getOffset(e);
                    //console.log('mousemove(x:'+offset.offsetX+',y:'+offset.offsetY+')');
                    painter.moveEvent.call(painter, 'mouseup', offset);
                });
            }
            this.hadEvenBind = true;
        }
    },
    build: function() {
        var painter = this;
        if (painter.onBuild) return;
        painter.onBuild = true;
        painter.ctx.clearRect(0, 0, painter.width, painter.height);
        if (painter.start) painter.start.call(painter);
        paintStream.forEach(function(item, index, array){
            paintName = Object.keys(item)[0];
            for (var p in item[paintName]) {
                if (p === 'region') continue;
                implement = item[paintName][p];
                //implement = painter.implements[p];
                painter.implName = p;
                painter.setImplement(implement, paintName);
                painter.options = painter.implement.options;
                /*
                if (typeof painter.implement.initialize == 'function')
                    painter.implement.initialize(painter);
                */
                painter.paint();
            }
        });
        painter.imgData = painter.ctx.getImageData(0, 0, painter.width, painter.height);
        painter.onBuild = false;
    },
    paint: function () {
        var pctx = this.implement;
        var data = this.data[this.implName];
        var ctx = this.ctx;

        if (pctx.start) pctx.start.call(this);

        if (typeof pctx.paintItems == 'function') {
            pctx.paintItems.call(this);
        }
        else {
            var dataLength = ((typeof pctx.getDataLength == 'function') ? pctx.getDataLength.call(this) : this.data.length);
            for (var i = 0; i < dataLength; i++) {
                var x = pctx.getX ? pctx.getX.call(this, i) : undefined;
                var y = pctx.getY ? pctx.getY.call(this, i) : undefined;
                if (typeof x === 'undefined' || typeof y === 'undefined') continue;
                pctx.paintItem.call(this, i, x, y);
            }
        }
        if (pctx.end) pctx.end.call(this);
    },
    moveEvent: function(eventName, offset) {
        //painter.ctx.clearRect(0, 0, painter.width, painter.height);
        var painter = this;
        if (painter.onBuild) return;
        painter.ctx.putImageData(painter.imgData, 0, 0);
        paintStream.forEach(function(item, index, array){
            paintName = Object.keys(item)[0];
            for (var p in item[paintName]) {
                if (p === 'region') continue;
                implement = painter.implements[p];
                painter.implName = p;
                painter.setImplement(implement, paintName);
                painter.options = painter.implement.options;
                if (!this.onBuild)
                    if (painter.implement[eventName]) painter.implement[eventName].call(painter, offset);
            }
        })
        
        if (!this.onBuild && this.reBuild) {
            paintStream.forEach(function(item, index, array){
                paintName = Object.keys(item)[0];
                for (var p in item[paintName]) {
                    if (p === 'region') continue;
                    implement = painter.implements[p];
                    painter.implName = p;
                    painter.setImplement(implement, paintName);
                    painter.options = painter.implement.options;
                    
                    if (painter.implement.reBuild) painter.implement.reBuild.call(painter);
                }
            })
        }
        
        if (!this.onBuild && this.reBuild) {
            var d1 = new Date();
            if (this.reInit)
                this.init.call(this);
            this.build.call(this);
            this.build.call(this);
            var d2 = new Date();
            console.log(parseInt(d2 - d1)/ 1000);
        }
        this.reInit = false;
        this.reBuild = false;
    },
    addPaintRegion: function(name_, x_, y_, width_, height_) {
        this.paintRegion[name_+'.x'] = x_;
        this.paintRegion[name_+'.y'] = y_;
        this.paintRegion[name_+'.width'] = width_;
        this.paintRegion[name_+'.height'] = height_;
    },
    prePaintRegion: function(paintName, coordinateType) {
        var key_ = paintName + '.' + coordinateType;
        var type_ = typeof this.paintRegion[key_];
        var v_ = this.paintRegion[key_];
        this.paintRegion[key_] = prePaintRegionObj.call(this, key_, type_, v_);
    },
    drawHLine: function (color, x0, y0, w, lineWidth, lineStyle) {
        var ctx = this.ctx;
        ctx.strokeStyle = color;
        if (y0 * 10 % 10 == 0) y0 += .5;
        if (lineStyle && lineStyle == 'dashed') {
            var width = 0;
            do {
                this.drawHLine(color, width, y0, dashSize, 1, 'solid');
                width += dashSize * 2;
            } while (width < w);
        }
        else {
            ctx.beginPath();
            ctx.moveTo(x0, y0);
            ctx.lineTo(x0 + w, y0);
            ctx.stroke();
        }
    },
    drawVLine: function (color, x0, y0, h, lineWidth, lineStyle) {
        var ctx = this.ctx;
        ctx.strokeStyle = color;
        if (x0 * 10 % 10 == 0) x0 += .5;
        if (lineStyle && lineStyle == 'dashed') {
            var height = 0;
            do {
                this.drawVLine(color, x0, height, dashSize, 1);
                height += dashSize * 2;
            } while (height < h);
        }
        else {
            ctx.beginPath();
            ctx.moveTo(x0, y0);
            ctx.lineTo(x0, y0 + h);
            ctx.stroke();

        }
    },
    setData: function (data) {
        this.data = data;
    },
    setImplement: function (implement, paintName) {
        this.implement = implement;
        this.paintName = paintName;
    },
    setNextPaint: function(x, y) {
        this.nextPaint.x = x;
        this.nextPaint.y = y;
    },
    reSetNextPaint: function() {
        this.setNextPaint(0, 0);
    },
    setPadding: function(tblr) {
        this.setPadding(tblr, tblr, tblr, tblr);
    },
    setPadding: function(tb, lr) {
        this.setPadding(tb, tb, lr, lr);
    },
    setPadding: function(t, b, l, r) {
        this.padding.top = t;
        this.padding.bottom = b;
        this.padding.left = l;
        this.padding.right = r;
    },
    reSetPadding: function() {
        this.setPadding(0, 0, 0, 0)
    },
    preData: function() {
        return this.data;
    }
}

function prePaintRegionObj(key_, type_, v_) {
    if (type_ === 'number') {
        if (key_.match(/\.x/))
            return v_;
        if (key_.match(/\.y/))
            return v_;
        if (key_.match(/\.width/))
            return v_;
        if (key_.match(/\.height/))
            return v_;
        if (key_.match(/padding\.(.+)/)) {
            if (this.padding.hasOwnProperty(key_.match(/padding\.(.+)/)[1])) {
                return this.padding[key_.match(/padding\.(.+)/)[1]];
            }
        }
    } else if (type_ === 'string') {
        if (Object.prototype.toString.call(v_.match(/^(\d+)\%$/)) === '[object Array]'
            && typeof v_.match(/^(\d+)\%$/)[1] === 'string') {
            var percentage = parseInt(v_.match(/^(\d+)\%$/)[1]);
            if (percentage > 100) percentage = 100;
            if (key_.match(/\.x/))
                return this.width * (percentage / 100);
            if (key_.match(/\.y/))
                return this.height * (percentage / 100);
            if (key_.match(/\.width/))
                return this.width * (percentage / 100);
            if (key_.match(/\.height/))
                return this.height * (percentage / 100);
        } else if (Object.prototype.toString.call(v_.match(/^f\:(.+)/)) === '[object Array]'
            && typeof v_.match(/^f\:(.+)/)[1] === 'string') {
            var format_ = v_.match(/^f\:(.+)/)[1];
            /*
            if (key_.match(/\.x/))
                return this.implement.getX.call(format_);
            if (key_.match(/\.y/))
                return this.implement.getY.call(format_);*/
            if (key_.match(/\.width/))
                return this.implement.getWidth.call(this, format_);
            if (key_.match(/\.height/))
                return this.implement.getHeight.call(this, format_);
        } else if (this.paintRegion.hasOwnProperty(v_)) {
            return this.paintRegion[v_];
        } else if (v_.match(/padding\.(.+)/) && this.padding.hasOwnProperty(v_.match(/padding\.(.+)/)[1])) {
            return this.padding[v_.match(/padding\.(.+)/)[1]];
        } else if (key_.match(/padding\.(.+)/) && this.padding.hasOwnProperty(key_.match(/padding\.(.+)/)[1])) {
            return this.padding[key_.match(/padding\.(.+)/)[1]];
        }
    } else if (type_ === 'object') {
        var tot = 0;
        for (var mathType in v_) {
            var object_v_ = v_[mathType];
            //v_ = {'$and':['price.x', 'price.width']}
            if (Object.prototype.toString.call(object_v_) === '[object Array]') {
                for (var object_i_ in object_v_) {
                    if (typeof object_v_[object_i_] === 'string' || typeof object_v_[object_i_] === 'object') {
                        var key__ = object_v_[object_i_];
                        var type__ = (typeof this.paintRegion[key__] != 'undefined') ? typeof this.paintRegion[key__] : typeof key__;
                        var v__ = (typeof this.paintRegion[key__] != 'undefined') ? this.paintRegion[key__] : key__;
                        key__ = (typeof object_v_[object_i_] === 'string' && object_v_[object_i_].match(/x|y|width|height|padding/)) ? object_v_[object_i_] : key_;
                        if (tot == 0)
                            tot = prePaintRegionObj.call(this, key__, type__, v__, false)
                        else
                            tot = math(mathType, tot, prePaintRegionObj.call(this, key__, type__, v__, false));
                    } else if (typeof object_v_[object_i_] === 'number'){
                        tot = math(mathType, tot, object_v_[object_i_]);;
                    }
                }
            }
        }
        return tot;
    }
}

function math(mathType, value1, value2) {
    if (mathType === '$and')
        return value1 + value2;
    if (mathType === '$sub')
        return value1 - value2;
    if (mathType === '$mul')
        return value1 * value2;
    if (mathType === '$div') {
        if (value2 == 0) return 0;
        return value1 / value2;
    }

    return 0;
}