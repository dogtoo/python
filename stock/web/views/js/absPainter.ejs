function Painter(canvasId, paintStream, data) {
    this.canvas = document.getElementById(canvasId);
    if (!this.canvas.getContext) return;
    this.ctx = this.canvas.getContext('2d');
    this.data = data;
    this.paintImplement = Object.prototype;
    this.paintName = 'absPainter';
    this.width = this.canvas.width;
    this.height = this.canvas.height;
    this.paintRegion = {}
    this.padding = {
        'top': 0
       ,'bottom': 0
       ,'left': 0
       ,'right': 0
    }

}
Painter.prototype = {
    build: function() {
        var painter = this;
        paintStream.forEach(function(item, index, array){
            paintName = Object.keys(item)[0];
            painter.addPaintRegion(paintName, item[paintName].region.x
                                            , item[paintName].region.y
                                            , item[paintName].region.width
                                            , item[paintName].region.height);
            for (var p in item[paintName]) {
                if (p === 'region') continue;
                painter.prePaintRegion(paintName, 'x');
                painter.prePaintRegion(paintName, 'y');
                painter.prePaintRegion(paintName, 'width');
                painter.prePaintRegion(paintName, 'height');
                //implement = item[paintName][p];
                //painter.setPainterImplement(implement, paintName);
                //painter.paint();
            }
        });
    },
    paint: function () {
        var pctx = this.paintImplement;
        var data = this.data;
        var ctx = this.ctx;
        if (typeof pctx.initialize == 'function') pctx.initialize(this);
        if (pctx.start) pctx.start.call(this);

        if (typeof pctx.paintItems == 'function') {
            pctx.paintItems.call(this);
        }
        else {
            var dataLength = ((typeof pctx.getDataLength == 'function') ? pctx.getDataLength.call(this) : this.data.length);
            for (var i = 0; i < dataLength; i++) {
                var x = pctx.getX ? pctx.getX.call(this, i) : undefined;
                var y = pctx.getY ? pctx.getY.call(this, i) : undefined;
                pctx.paintItem.call(this, i, x, y);
            }
        }
        if (pctx.end) pctx.end.call(this);
    },
    addPaintRegion: function(name_, x_, y_, width_, height_) {
        painter.paintRegion[name_+'.x'] = x_;
        painter.paintRegion[name_+'.y'] = y_;
        painter.paintRegion[name_+'.width'] = width_;
        painter.paintRegion[name_+'.height'] = height_;
    },
    prePaintRegion: function(paintName, coordinateType) {
        var key_ = paintName + '.' + coordinateType;
        var type_ = typeof painter.paintRegion[key_];
        var v_ = painter.paintRegion[key_];
        prePaintRegionObj(key_, type_, v_);
    },
    drawHLine: function (color, x0, y0, w, lineWidth, lineStyle) {
        var ctx = this.ctx;
        ctx.strokeStyle = color;
        if (y0 * 10 % 10 == 0) y0 += .5;
        if (lineStyle && lineStyle == 'dashed') {
            var width = 0;
            do {
                this.drawHLine(color, width, y0, dashSize, 1, 'solid');
                width += dashSize * 2;
            } while (width < w);
        }
        else {
            ctx.beginPath();
            ctx.moveTo(x0, y0);
            ctx.lineTo(x0 + w, y0);
            ctx.stroke();
        }
    },
    drawVLine: function (color, x0, y0, h, lineWidth, lineStyle) {
        var ctx = this.ctx;
        ctx.strokeStyle = color;
        if (x0 * 10 % 10 == 0) x0 += .5;
        if (lineStyle && lineStyle == 'dashed') {
            var height = 0;
            do {
                this.drawVLine(color, x0, height, dashSize, 1);
                height += dashSize * 2;
            } while (height < h);
        }
        else {
            ctx.beginPath();
            ctx.moveTo(x0, y0);
            ctx.lineTo(x0, y0 + h);
            ctx.stroke();

        }
    },
    setData: function (data) {
        this.data = data;
    },
    setPainterImplement: function (implement, paintName) {
        this.paintImplement = implement;
        this.paintName = paintName;
    },
    setNextPaint: function(x, y) {
        this.nextPaint.x = x;
        this.nextPaint.y = y;
    },
    reSetNextPaint: function() {
        this.setNextPaint(0, 0);
    },
    setPadding: function(tblr) {
        this.setPadding(tblr, tblr, tblr, tblr);
    },
    setPadding: function(tb, lr) {
        this.setPadding(tb, tb, lr, lr);
    },
    setPadding: function(t, b, l, r) {
        this.padding.top = t;
        this.padding.bottom = b;
        this.padding.left = l;
        this.padding.right = r;
    },
    reSetPadding: function() {
        this.setPadding(0, 0, 0, 0)
    }
}

function prePaintRegionObj(key_, type_, v_) {
    if (type_ === 'number') {
        painter.paintRegion[key_] = v_ + painter.padding.left;
    } else if (type_ === 'string') {
        if (typeof v_.match(/(\d+)\%$/)[1] === 'number') {
            var percentage = int(v_.match(/(\d+)\%$/)[1]);
            if (percentage > 100) percentage = 100;
            if (coordinateType.match(/x/))
                painter.paintRegion[key_] = painter.width * (v_ / 100);
            if (coordinateType.match(/y/))
                painter.paintRegion[key_] = painter.height * (v_ / 100);
            if (coordinateType.match(/width/))
                painter.paintRegion[key_] = (painter.width - painter.padding.left - painter.padding.right) * (v_ / 100);
            if (coordinateType.match(/height/))
                painter.paintRegion[key_] = (painter.height - painter.padding.top - painter.padding.bottom) * (v_ / 100);
        } else if (painter.paintRegion.hasOwnProperty(v_)) {
            var t_v_ = painter.paintRegion[v_];
            painter.paintRegion[key_] = t_v_;
        }
    } else if (type_ === 'object') {
        var tot = 0;
        for (var mathType in v_) {
            var object_v_ = v_[mathType];
            //v_ = {'$and':['price.x', 'price.width']}
            if (Object.prototype.toString.call(object_v_) === '[object Array]') {
                for (var object_i_ in object_v_) {
                    var key__ = object_i_;
                    var type__ = typeof painter.paintRegion[object_i_];
                    var v__ = painter.paintRegion[object_i_];
                    math(mathType, tot, prePaintRegionObj(key__, type__, v__));
                }
            }
            //prePaintRegionObj();
        }
        painter.paintRegion[key_] = tot;
    }
}

function math(mathType, value1, value2) {
    if (mathType === '$and')
        return value1 + value2;
    if (mathType === '$sub')
        return value1 - value2;
    if (mathType === '$mul')
        return value1 * value2;
    if (mathType === '$div') {
        if (value2 == 0) return 0;
        return value1 / value2;
    }

    return 0;
}