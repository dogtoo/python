function yAxis(options) {
  this.options = options;
  if (typeof this.options.low === 'undefined') this.options.low = 0;
  if (typeof this.options.high === 'undefined') this.options.high = 0;
  if (typeof this.options.horizontalLineCount === 'undefined') this.options.horizontalLineCount = 0;
  if (typeof this.options.font === 'undefined') this.options.font = '12px Arial';
  if (typeof this.options.dataType === 'undefined') this.options.dataType = 'undefined';
  if (typeof this.options.dataRange === 'undefined') this.options.dataRange = 'seq';
  this.options.y = [];
  this.options.yScale = 0;
}

yAxis.prototype = {
    /*
    initialize: function (painter) {
        painter.options = this.options;
    },
    */
    initialize: function () {
        this.options.y = [];
        this.options.yScale = 0;
    },
    start: function () {
        var ctx = this.ctx;
        ctx.save();
        if (typeof this.options.color == 'string') ctx.fillStyle = this.options.color;
        ctx.font = this.options.font;
        ctx.translate(this.paintRegion[paintName + '.x'], this.paintRegion[paintName + '.y']);
        if (this.options.textBaseline) ctx.textBaseline = this.options.textBaseline;
    },
    end: function () { this.ctx.restore(); },
    getDataLength : function() {
        return (typeof this.data[this.implName] != 'undefined') ? this.data[this.implName].length : 0;
    },
    getX: function (i) {
        /*未使用
        if (this.options.align == 'left') return 0;*/
        var w = this.ctx.measureText(this.data[this.implName][i]).width;
        return this.paintRegion[this.paintName + '.width'] - w;
    },
    getY: function (i) {
        //if (i == 0) return 0;
        //console.log('height:'+this.paintRegion[this.paintName + '.height']+',length:'+(this.data[this.implName].length - 1)+',fontHeight:'+this.options.fontHeight / 2);
        //this.paintImplement.getYScale(this.data[this.implName]);
        //return this.options.yScale;
        //return (this.paintRegion[this.paintName + '.height'] * i / (this.data[this.implName].length - 1) - this.options.fontHeight / 2);
        if (this.options.dataRange === 'seq') {
            var v_c = Math.round((this.options.y.length)/this.options.horizontalLineCount);
            var y = (i * v_c);
            var diff = this.options.y.length - y;
            if (diff < v_c || y >= this.options.y.length) y = this.options.y.length - 1;
            return (this.options.y[y] + this.options.fontHeight <= this.paintRegion[this.paintName + '.height']) ? this.options.y[y] : this.paintRegion[this.paintName + '.height'] - this.options.fontHeight;
        } else if (this.options.dataRange === 'range') {
            if (i == this.data[this.implName].length-1) return this.paintRegion[this.paintName + '.height'] ;
            this.paintImplement.getYScale(this.data[this.implName]);
            y = this.paintRegion[this.paintName + '.height'] - this.options.yScale * (this.data[this.implName][i] - this.options.low);
            return y;
        }
    },
    paintItem: function (i, x, y) {
        /*未使用
        if (typeof this.options.color == 'function')
            this.ctx.fillStyle = this.options.color(this.data[this.implName][i]);*/
        (typeof this.options.y[i] === 'undefined') ? this.options.y.push(y) : this.options.y[i][y];
        this.ctx.fillText(this.data[this.implName][i], x, y);
    },
    getName: function() {
        return 'yAxis';
    },
    getWidth: function(format) {
        return determineFontWidth(this.options.font, format);
    },
    getHeight: function(format) {
        return 0;
    },
    preData: function(data) {
        if (Object.prototype.toString.call(data) != '[object Array]') return;
        if (data.length <= 0) return;
        this.options.fontHeight = determineFontHeight(this.options.font, data[0]);

        this.options.horizontalLineCount = Math.round(this.paintRegion[this.paintName + '.height'] / this.options.fontHeight / 2);
        this.options.horizontalLineCount = (this.options.horizontalLineCount <= 1) ? 2 : this.options.horizontalLineCount;
        if (this.options.dataRange === 'seq') {
            var yScalers = [];
            var stepLength = data.length / (this.options.horizontalLineCount - 1);
            if (stepLength < 1) {
                this.options.horizontalLineCount = data.length;
                stepLength = 1;
            }
            yScalers.push(convertDate(data[0], false).substr(2));
            for (var i = 1; i < this.options.horizontalLineCount; i++) {
                var index = Math.ceil(i * stepLength);
                if (index >= data.length) index = data.length - 1;
                var quoteTime = convertDate(data[index], false);
                quoteTime = quoteTime.substr(2);
                yScalers.push(quoteTime);
            }
            this.data[this.implName] = yScalers;
        } else if (this.options.dataRange === 'range') {
            this.options.low = data[0];
            this.options.high = data[data.length-1];
            this.data[this.implName] = calcAxisValues(this.options.high
                                , this.options.low
                                , this.options.horizontalLineCount, this.options.dataType)
        }
    },
    getYScale: function(data) {
        if (this.options.dataRange === 'seq') {
            if (painter.paintRegion.hasOwnProperty(painter.paintName + '.height'))
                this.options.yScale = painter.paintRegion[painter.paintName + '.height'] / data.length;
        } else if (this.options.dataRange === 'range') {
            if (painter.paintRegion.hasOwnProperty(painter.paintName + '.height'))
                this.options.yScale = painter.paintRegion[painter.paintName + '.height'] / Math.abs(this.options.high - this.options.low);
        }
    }
};

function calcAxisValues(high, low, count,formatFunc) {
    var diff = high - low;
    var space = diff / (count-1);
    var result = [];
    //if (typeof formatFunc == 'undefined') formatFunc = toMoney;
    for (var i = 0; i < count; i++) {
        if (formatFunc == 'money')
            result.push(toMoney(high - i * space));
        if (formatFunc == 'number')
            result.push(bigNumberToText(high - i * space));
    }
    return result;
}

