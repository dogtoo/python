function yAxis(options) {
    axis.call(this, options);
    this.options = options;
    if (typeof this.options.low === 'undefined') this.options.low = 0;
    if (typeof this.options.high === 'undefined') this.options.high = 0;
    if (typeof this.options.horizontalLineCount === 'undefined') this.options.horizontalLineCount = 0;
    //if (typeof this.options.font === 'undefined') this.options.font = '12px Arial';
    //if (typeof this.options.dataType === 'undefined') this.options.dataType = 'undefined';
    //if (typeof this.options.dataRange === 'undefined') this.options.dataRange = 'seq';
    //this.options.y = [];
    //this.options.yScale = 0;
    this.options.className = 'yAxis';
}

    yAxis.prototype = axis.prototype;
    //yAxis.prototype.constructor = yAxis;
    //yAxis.prototype.initialize = function () {
    //    this.options.x = [];
    //    this.options.y = [];
    //    this.options.yScale = 0;
    //};
    yAxis.prototype.getX = function (i) {
        var w = this.ctx.measureText(format(this.data[this.implName][i], this.options.dataType)).width;
        return this.paintRegion[this.paintName + '.width'] - w;
    };
    
    yAxis.prototype.getY = function (i) {
        if (this.options.build) {
            var v_c = Math.round((this.options.y.length)/this.options.horizontalLineCount);
            var y = (i * v_c);
            var diff = this.options.y.length - y;
            //if (diff < v_c || y >= this.options.y.length) y = this.options.y.length - 1;
            return (this.options.y[y] + this.options.fontHeight <= this.paintRegion[this.paintName + '.height']) ? this.options.y[y] : this.paintRegion[this.paintName + '.height'];
        } else {
            if (i == this.data[this.implName].length-1) 
                return this.paintRegion[this.paintName + '.height'];
            this.implement.getYScale.call(this, this.options, this.data[this.implName]);
            if (this.options.dataRange === 'seq')
                return i * this.options.scale;
            if (this.options.dataRange === 'range') {
                var diff = 0;
                if (this.options.order == 'desc')
                    diff = convertFormat(this.options.high, this.options.dataType) - convertFormat(this.data[this.implName][i], this.options.dataType);
                else
                    diff = convertFormat(this.data[this.implName][i], this.options.dataType) - convertFormat(this.options.low, this.options.dataType);
                return this.paintRegion[this.paintName + '.height'] - this.options.scale * (diff);
            }
        }
    };
    yAxis.prototype.getHeight = function(format) {
        if (typeof this.paintRegion[this.paintName + '.height'] != 'undefined' && !isNaN(this.paintRegion[this.paintName + '.height']))
            return this.paintRegion[this.paintName + '.height'];
        else {
            if (typeof format === 'undefined') format = 'TEST';
            this.options.fontHeight = determineFontHeight(this.options.font, format);
            return this.options.fontHeight + 2;
        }
    };
    yAxis.prototype.getWidth = function(format) {
        if (typeof this.paintRegion[this.paintName + '.width'] != 'undefined' && !isNaN(this.paintRegion[this.paintName + '.width']))
            return this.paintRegion[this.paintName + '.width'];
        else {
            if (typeof format === 'undefined') format = 'TEST';
            this.options.fontWidth = determineFontWidth(this.options.font, format);
            return this.options.fontWidth + 2;
        }
    };
    yAxis.prototype.preData = function(data) {
        if (Object.prototype.toString.call(data) != '[object Array]') return;
        if (data.length <= 0) return;
        this.options.fontHeight = determineFontHeight(this.options.font, data[0]);

        this.options.horizontalLineCount = Math.round(this.paintRegion[this.paintName + '.height'] / this.options.fontHeight / 2);
        this.options.horizontalLineCount = (this.options.horizontalLineCount <= 1) ? 2 : this.options.horizontalLineCount;
        if (this.options.dataRange === 'seq') {
            var yScalers = [];
            if (data.length < this.options.horizontalLineCount) this.options.horizontalLineCount = data.length - 1;
            var stepLength = data.length / (this.options.horizontalLineCount - 1);
            if (stepLength < 1) {
                this.options.horizontalLineCount = data.length - 1;
                stepLength = 1;
            }
            yScalers.push(data[0]);
            for (var i = 1; i < this.options.horizontalLineCount; i++) {
                var index = Math.ceil(i * stepLength);
                if (index >= data.length) index = data.length - 1;
                //var quoteTime = data[index];
                yScalers.push(data[index]);
            }
            this.data[this.implName] = yScalers;
        } else if (this.options.dataRange === 'range') {
            this.options.low = data[0];
            this.options.high = data[data.length-1];
            //this.data[this.implName] = calcRangeValues(this.options.high
            //                    , this.options.low
            this.data[this.implName] = calcRangeValues(data.reverse()
                                , this.options.horizontalLineCount, this.options.dataType);
            this.options.horizontalLineCount = this.data[this.implName].length;
            //this.options.horizontalLineCount -= 1;
            if (this.options.order == 'desc') {
                this.data[this.implName].sort(function(a, b) {
                    return a - b;
                });
            }
        }
    };
    
    yAxis.prototype.getYScale = function(options, data) {
        if (options.dataRange === 'seq') {
            if (this.paintRegion.hasOwnProperty(this.paintName + '.height'))
                options.scale = this.paintRegion[this.paintName + '.height'] / data.length;
        } else if (options.dataRange === 'range') {
            if (this.paintRegion.hasOwnProperty(this.paintName + '.height'))
                options.scale = this.paintRegion[this.paintName + '.height'] / Math.abs(options.high - options.low);
        }
    };
