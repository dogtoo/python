function xAxis(options){
    axis.call(this, options);
    this.options = options;
    if (typeof this.options.first === 'undefined') this.options.first = 0;
    if (typeof this.options.last === 'undefined') this.options.last = 0;
    if (typeof this.options.verticalLineCount === 'undefined') this.options.verticalLineCount = 0;
    //if (typeof this.options.font === 'undefined') this.options.font = '12px Arial';
    //if (typeof this.options.dataType === 'undefined') this.options.dataType = 'undefined';
    //if (typeof this.options.dataRange === 'undefined') this.options.dataRange = 'seq';    
    //this.options.x = [];
    //this.options.xScale = 0;
    this.options.className = 'xAxis';
}
    xAxis.prototype = Object.create(axis.prototype);
    xAxis.prototype.constructor = xAxis;
    /*xAxis.prototype.initialize = function () {
        this.options.x = [];
        this.options.xScale = 0;
    };*/
    xAxis.prototype.getY = function () {
        return 0;
    };
    xAxis.prototype.getX = function (i) {
        if (this.options.build) {
            console.log(this.paintRegion[this.paintName + '.width'] / this.options.scale);
            if (this.paintRegion[this.paintName + '.width'] / this.options.scale > this.options.x.length) {
                return this.options.x[x];
            } else {
                var v_c = Math.round((this.options.x.length)/this.options.verticalLineCount);
                var x = (i * v_c);
                var diff = this.options.x.length - x;
                //if (diff < v_c || x >= this.options.x.length) x = this.options.x.length - 1;
                return (this.options.x[x] + this.options.fontWidth/2 <= this.paintRegion[this.paintName + '.width']) ? 
                    this.options.x[x] - this.options.fontWidth/2 : this.paintRegion[this.paintName + '.width'] - this.options.fontWidth/2;
            }
        } else {
            if (i == this.data[this.implName].length-1) return this.paintRegion[this.paintName + '.width'] ;
            this.implement.getXScale.call(this, this.options, this.data[this.implName]);
            if (this.options.dataRange === 'seq')
                return (i * this.options.scale) - this.options.fontWidth/2;
            if (this.options.dataRange === 'range') {
                var diff = 0;
                if (this.options.order == 'desc')
                    diff = convertFormat(this.options.last, this.options.dataType) - convertFormat(this.data[this.implName][i], this.options.dataType);
                else
                    diff = convertFormat(this.data[this.implName][i], this.options.dataType) - convertFormat(this.options.first, this.options.dataType);
                console.log(this.paintRegion[this.paintName + '.width'] - this.options.scale * diff);
                return this.paintRegion[this.paintName + '.width'] - this.options.scale * (diff);
            }
        }        
    };
    xAxis.prototype.getHeight = function(format) {
        if (typeof this.paintRegion[this.paintName + '.height'] != 'undefined' && !isNaN(this.paintRegion[this.paintName + '.height']))
            return this.paintRegion[this.paintName + '.height'];
        else {
            if (typeof format === 'undefined') format = 'TEST';
            this.options.fontHeight = determineFontHeight(this.options.font, format);
            return this.options.fontHeight + 2;
        }
    };
    xAxis.prototype.getWidth = function(format) {
        if (typeof this.paintRegion[this.paintName + '.width'] != 'undefined' && !isNaN(this.paintRegion[this.paintName + '.width']))
            return this.paintRegion[this.paintName + '.width'];
        else {
            if (typeof format === 'undefined') format = 'TEST';
            this.options.fontWidth = determineFontWidth(this.options.font, format);
            return this.options.fontWidth + 2;
        }
    };
    xAxis.prototype.preData = function(data) {
        if (Object.prototype.toString.call(data) != '[object Array]') return;
        if (data.length <= 0) return;

        this.ctx.font = this.options.font;
        this.options.fontWidth= determineFontWidth(this.options.font, data[0]);
        this.options.verticalLineCount = Math.round((this.paintRegion[this.paintName + '.width'] - this.options.fontWidth) / this.options.fontWidth /3 );
        this.options.verticalLineCount = (this.options.verticalLineCount <= 1) ? 2 : this.options.verticalLineCount;
        if (data.length < this.options.verticalLineCount) this.options.verticalLineCount = data.length;
        if (this.options.dataRange === 'seq') {
            var xScalers = [];
            var stepLength = Math.round(data.length / this.options.verticalLineCount);
            if (stepLength < 1) {
                this.options.verticalLineCount = data.length - 1;
                stepLength = 1;
            }
            
            //xScalers.push(convertDate(data[0], false).substr(2));
            xScalers.push(data[0]);
            var index = 1;
            for (var i = 1; i < this.options.verticalLineCount; i++) {
                index = index + stepLength - ((i == 1)?1:0);
                if (index >= data.length) index = data.length - 1;
                xScalers.push(data[index]);
            }
            xScalers.push(data[data.length - 1]);
            this.data[this.implName] = xScalers;
        } else if (this.options.dataRange === 'range') {
            this.options.first = data[0];
            this.options.last = data[data.length-1];
            this.data[this.implName] = calcRangeValues(this.options.last
                                , this.options.first
                                , this.options.verticalLineCount, this.options.dataType);
            if (this.options.order == 'desc') {
                this.data[this.implName].sort(function(a, b) {
                    return a - b;
                });
            }
        }

    };
    xAxis.prototype.getXScale = function(options, data) {
        if (options.dataRange === 'seq') {
            if (this.paintRegion.hasOwnProperty(this.paintName + '.width'))
                options.scale = this.paintRegion[this.paintName + '.width'] / data.length;
        } else if (options.dataRange === 'range') {
            if (this.paintRegion.hasOwnProperty(this.paintName + '.width')) {
                var last = convertFormat(options.last, options.dataType);
                var first = convertFormat(options.first, options.dataType);                
                options.scale = this.paintRegion[this.paintName + '.width'] / Math.abs(last - first);
            }
        }
    };