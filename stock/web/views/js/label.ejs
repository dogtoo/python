function label(options) {
    this.options = options;
    
    if (typeof this.options.yAxisName === 'undefined') this.options.yAxisName = 'yAxis';
    if (typeof this.options.xAxisName === 'undefined') this.options.xAxisName = 'xAxis';
    this.options.yAxis = new yAxis({});
    this.options.xAxis = new xAxis({});
    
    if (typeof this.options.x === 'undefined') this.options.x = 0;
    if (typeof this.options.y === 'undefined') this.options.y = 0;
    if (typeof this.options.margin === 'undefined') this.options.margin = 10;
    if (typeof this.options.quadrant === 'undefined') this.options.quadrant = 2;
    this.options.quadrant_ = 1;
    //if (typeof this.options.innerHTML === 'undefined') this.options.innerHTML = '<label>test</label>';
    if (typeof this.options.innerHTML === 'undefined') this.options.innerHTML = '';
    if (typeof this.options.width === 'undefined') this.options.width = 0;
    if (typeof this.options.height === 'undefined') this.options.height = 0;
    this.options.id = Math.floor(Date.now() / 1000) + Math.floor(Math.random() * 100);
}

label.prototype = {
    /*
    initialize: function (painter) {
        painter.options = this.options;
        if (typeof painter.options.yAxis === 'string' && typeof painter.implements[painter.options.yAxis] != 'undefined')
            painter.options.yAxis = painter.implements[painter.options.yAxis];
        if (typeof painter.options.xAxis === 'string' && typeof painter.implements[painter.options.xAxis] != 'undefined')
            painter.options.xAxis = painter.implements[painter.options.xAxis];
    },*/
    initialize: function () {
        if (typeof this.implements[this.options.yAxisName] != 'undefined')
            this.options.yAxis = this.implements[this.options.yAxisName];
        if (typeof this.implements[this.options.xAxisName] != 'undefined')
            this.options.xAxis = this.implements[this.options.xAxisName];
    },
    start: function () {
        if (this.options.innerHTML === '')
            return;
        var ctx = this.ctx;
        ctx.zIndex = 1;
        ctx.save();
        ctx.translate(this.paintRegion[paintName + '.x'], this.paintRegion[paintName + '.y']);
        
        var rdiv = document.getElementById(this.implName+'_'+this.options.id);
        if (rdiv)
            rdiv.parentNode.removeChild(rdiv);
        
        this.options.quadrant_ = this.options.quadrant;
        if (this.options.quadrant_.toString().match(/1|4/)) {
            if (this.options.x + this.options.margin + this.options.width > this.paintRegion[paintName + '.width']) {
                if (this.options.quadrant_ == 1)
                    this.options.quadrant_ = this.options.quadrant_ + 1;
                else
                    this.options.quadrant_ = this.options.quadrant_ - 1;
            }
        } else {
            if (this.options.x - this.options.margin - this.options.width < 0) {
                if (this.options.quadrant_ == 3)
                    this.options.quadrant_ = this.options.quadrant_ + 1;
                else
                    this.options.quadrant_ = this.options.quadrant_ - 1;
            }
        }

        if (this.options.quadrant_.toString().match(/1|2/)) {
            if (this.options.y - this.options.margin - this.options.height < 0) {
                if (this.options.quadrant_ == 1)
                    this.options.quadrant_ = this.options.quadrant_ + 3;
                else
                    this.options.quadrant_ = this.options.quadrant_ + 1;
            }
        } else {
            if (this.options.y + this.options.margin + this.options.height > this.paintRegion[paintName + '.height']) {
                if (this.options.quadrant_ == 3)
                    this.options.quadrant_ = this.options.quadrant_ - 1;
                else
                    this.options.quadrant_ = this.options.quadrant_ - 3;
            }
        }
        
        this.options.x = this.options.x + this.ctx.canvas.offsetLeft + this.paintRegion[paintName + '.x'];
        this.options.y = this.options.y + this.ctx.canvas.offsetTop + this.paintRegion[paintName + '.y'];
                
        //this.ctx.beginPath();
        //this.ctx.strokeStyle = this.options.strokeStyle;
        //this.ctx.lineWidth = this.options.lineWidth;
    },
    end: function () {
        //this.ctx.stroke();
        //this.options.prevX = null;
        //this.options.prevY = null;
        this.ctx.restore();
    },
    getDataLength : function() {
        return 0;
    },
    //getX: function (i) {
    //    return 0;
    //},
    //getY: function (i) {
    //    return 0;
    //},
    //paintItem: function (i, x, y) {
    //    const div = document.createElement("div");
    //    div.width = 100;
    //    div.height = 70;
    //    document.body.appendChild(div);
    //},
    paintItems: function () {
        if (this.options.innerHTML === '')
            return;
        if (this.drawPainter) {
            var div = document.createElement("div");
            div.id = this.implName+'_'+this.options.id;
            div.style.width = this.options.width + 'px';
            div.style.height = this.options.height + 'px';
            document.body.appendChild(div);
            div.style.zIndex = 1;
            div.style.position = 'absolute';
            
            div.style.border = '1px solid ';
            
            if (this.options.quadrant_.toString().match(/1|4/)) {
                div.style.left =  (this.options.x + this.options.margin) + 'px';
            } else {
                div.style.left =  (this.options.x - this.options.margin - this.options.width) + 'px';
            }
            
            if (this.options.quadrant_.toString().match(/1|2/)) {
                div.style.top =  (this.options.y - this.options.margin - this.options.height ) + 'px';
            } else {
                div.style.top =  (this.options.y + this.options.margin) + 'px';
            }
            //console.log('Q:'+ this.options.quadrant_ + ', top:' + div.style.top + ', left:' + div.style.left);
            //div.style.left =  this.options.x + 'px';
            //div.style.top =  this.options.y + 'px';
            
            //if (Object.prototype.toString.call(this.options.yAxis.options.y) === '[object Array]' && this.options.yAxis.options.y.length > 0) {
            //    //i = Math.round(y / this.options.yAxis.options.kLineWidth) - 1;
            //    if (Object.prototype.toString.call(this.options.yAxis.options.y[i]) === '[object Array]')
            //        y = this.options.yAxis.options.y[i][0];
            //    else
            //        y = this.options.yAxis.options.y[i];
            //}
            div.innerHTML = this.options.innerHTML;
            
            //var rdiv = document.getElementById('label');
            //rdiv.parentNode.removeChild(rdiv);
        }
        else {
            //var rdiv = document.getElementById('label');
            //if (rdiv)
            //    rdiv.parentNode.removeChild(rdiv);
        }
    },
    toString: function() {
        return 'label';
    },
    preData: function(data) {
        //if (data.length > 0) {
        //    this.options.x = data[0];
        //    this.options.y = data[1];
        //}
    },mousemove: function(offset) {
        this.implement.start.call(this);
        //測試用
        //this.data[this.implName] = [offset.offsetX,offset.offsetY];
        this.implement.paintItems.call(this);
        this.implement.end.call(this);
    }
};

